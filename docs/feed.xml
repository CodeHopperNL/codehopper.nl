<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="//codehopper.nl/feed.xml" rel="self" type="application/atom+xml" /><link href="//codehopper.nl/" rel="alternate" type="text/html" /><updated>2016-11-30T22:58:28+01:00</updated><id>//codehopper.nl/</id><title>CodeHopper</title><subtitle>Software and technology done right</subtitle><entry><title>Dear future me</title><link href="//codehopper.nl/2016/01/10/a-new-chapter/" rel="alternate" type="text/html" title="Dear future me" /><published>2016-01-10T00:00:00+01:00</published><updated>2016-01-10T00:00:00+01:00</updated><id>//codehopper.nl/2016/01/10/a-new-chapter</id><content type="html" xml:base="//codehopper.nl/2016/01/10/a-new-chapter/">&lt;blockquote&gt;
  &lt;p&gt;What’s the most important thing you can possibly work on now? And why are you not doing it?&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Anonymous&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dear future me, here’s you at the very end of your experience at Sytac.&lt;/p&gt;

&lt;p&gt;Yes, you multiple personalities weirdo.
As of today you are not anymore on office as the CTO of &lt;a href=&quot;http://www.sytac.nl&quot;&gt;Sytac&lt;/a&gt;,
the IT consulting company you’ve part of in the last two years. As your memory is proverbially
awful, I hope these notes will give you a better perspective on how you feel
at the moment, surely a better one than what you &lt;em&gt;think&lt;/em&gt; you had.&lt;/p&gt;

&lt;h1 id=&quot;on-leaving&quot;&gt;On leaving&lt;/h1&gt;

&lt;p&gt;Yes, you quitter. It’s not the first time you leave colleagues you loved behind,
and you firmly believe that either you are part of the solution, or you are part
of the problem. Yet to leave is like declaring to the general public that you
believe to be part of the problem, so what’s up with that?&lt;/p&gt;

&lt;p&gt;Well, that’s true. With all your ideas and suggestions and big mouth and stuff,
you weren’t able to fix the problems that always bothered you, making you 100%
part of the problem, certified. Deep inside you almost always knew that you
were not cut for leading Sytac to revolutionize itself on your terms, and maybe
that was even a foolish thing to hope for in the first place.&lt;/p&gt;

&lt;p&gt;Yet, you wanted to believe and ran circles &lt;em&gt;around&lt;/em&gt; the main issues without facing the
biggest obstacles first. You feared you would have crushed on them anyway.&lt;/p&gt;

&lt;p&gt;So yes, better leave and give way to the new. But remember: next time, face the
biggest issues first, or else you might find yourself wasting precious time
chasing windmills.&lt;/p&gt;

&lt;h1 id=&quot;on-career&quot;&gt;On career&lt;/h1&gt;

&lt;p&gt;Yes, your ego. As pretty much everyone that ever wrote some software, you have a big
thirst for the alpha-nerd recognition. You did prove yourself here, so much that
you earned the C level. That was a morality booster for you, wasn’t it?&lt;/p&gt;

&lt;p&gt;The thing is, for you the most important part of getting up the ladder is to
prove yourself that you are capable of handling the bigger headaches that any
new accomplishment comes with. One step up, and you take due note that ok, that
is something you can do if you want. You fed your ego enough, time to move on.&lt;/p&gt;

&lt;p&gt;At this point you have evolved from an insecure, awkward nerd into an accomplished
professional who craves stage time and public attention. Your ego has inflated
enough, and at the moment you look at that CTO thingy more as an uncomfortable
position: if you are the top dog, who will you learn from?&lt;/p&gt;

&lt;p&gt;But by now you know it all too well, that you care almost nothing for what step of
the ladder you occupy: do something great and do it good, that’s what makes you
open your tail like a &lt;pavone&gt;.&lt;/pavone&gt;&lt;/p&gt;

&lt;h1 id=&quot;on-having-guts&quot;&gt;On having guts&lt;/h1&gt;

&lt;p&gt;Yes, you sissy. Despite your quite evident issue of &lt;em&gt;logorroico&lt;/em&gt;, you missed many
occasions in which you could open your damn mouth when it really mattered. You
saw potential and you didn’t fight to realize it. And you know why? You didn’t
think you could win it. And maybe you could not, but that’s beside the point.&lt;/p&gt;

&lt;p&gt;Make sure you always try your best, and if you think that’s not enough then be
open and admit failure. In software as in life, fail fast is always the best
option for everyone involved.&lt;/p&gt;

&lt;h1 id=&quot;on-closing&quot;&gt;On closing&lt;/h1&gt;

&lt;p&gt;Yes, you blatant fool, time to close this letter.&lt;/p&gt;

&lt;p&gt;The past two years have been an interesting journey, and you did grow personally
and professionally and you &lt;a href=&quot;http://amsterdam2016.codemotionworld.com&quot;&gt;did things&lt;/a&gt;
you never dreamt you could handle. And as you know yourself good enough, that can
only mean that bigger challenges are ahead.&lt;/p&gt;

&lt;p&gt;Brace yourself, for the journey and keep your focus sharp on things that really
matter to you. But as you who read this is me in the future, you know that better
than me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;*eterno ritorno*&quot;&gt;Or do you?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A si biri in bon’ora.&lt;/p&gt;</content><category term="real life" /><category term="sytac" /><summary>What’s the most important thing you can possibly work on now? And why are you not doing it?

  Anonymous</summary></entry><entry><title>The best keyboard layout for Clojurists</title><link href="//codehopper.nl/2015/03/01/colemak-best-keyboard-for-clojurists/" rel="alternate" type="text/html" title="The best keyboard layout for Clojurists" /><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><id>//codehopper.nl/2015/03/01/colemak-best-keyboard-for-clojurists</id><content type="html" xml:base="//codehopper.nl/2015/03/01/colemak-best-keyboard-for-clojurists/">&lt;h1 id=&quot;keyboards-oh-my&quot;&gt;Keyboards, oh my!&lt;/h1&gt;

&lt;p&gt;If you’re a programmer, you spend most of your working life on your keyboard, and a good keyboard layout can make the difference between touch typing and carpal syndrome.&lt;/p&gt;

&lt;p&gt;That, and an irresistible drive for being the alpha nerd around, pushed me to teach myself &lt;a href=&quot;http://colemak.com/&quot;&gt;Colemak&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was painful and frustrating at the beginning, when I saw my typing speed precipitating from a respectable 80 words per minute to a horrific 20wpm. But now, now that touch typing has no mysteries for me on this mystical keyboard, now I got beyond my past self, recently crushing the 90wpm milestone. Hooray!&lt;/p&gt;

&lt;h1 id=&quot;def-best&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(def best)&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;In this data driven world, we constantly need to verify whether the decisions we make are still valid, and therefore the question: would Colemak be the best keyboard for me? Am I losing by sticking with the wrong choice? And would I be even willing to switch again keyboard layout in the foreseeable future?&lt;/p&gt;

&lt;p&gt;While the answer to the last question is a roaring &lt;a href=&quot;http://images.sodahead.com/polls/003657975/125779928_Noooooooooooooooo_answer_1_xlarge.Peg&quot;&gt;“NO!”&lt;/a&gt;, I needed to know. I needed data. But how?&lt;/p&gt;

&lt;p&gt;Well, first things first, I type lots of &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; and &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; these days. But I don’t care for the former language, my heart is really about my dear lispy friend. I just had to find a way to produce an automatic comparison, surely enough, here it is: the &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer/&quot;&gt;Keyboard Layout Analyzer&lt;/a&gt;, courtesy of &lt;a href=&quot;http://patorjk.com/&quot;&gt;Patrick Gillespie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love the Internet.&lt;/p&gt;

&lt;h1 id=&quot;the-winner-is&quot;&gt;The winner is..&lt;/h1&gt;

&lt;p&gt;Aaaaand here it is: a comparative analysis of what keyboard is the best for Clojure Developers™, after feeding the analyzer with &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clojure/core.clj&lt;/code&gt;&lt;/a&gt;, with its impressive 7447 lines of code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/colemak_clj.png&quot; alt=&quot;Test results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you know. Now it’s official.&lt;/p&gt;

&lt;p&gt;Happy touch typing, everyone!&lt;/p&gt;

&lt;p&gt;p.s.: you can read the details of the comparison &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer/#/load/D40PQ0hB&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="clojure" /><category term="keyboard" /><category term="colemak" /><summary>Keyboards, oh my!</summary></entry><entry><title>Spring Environment is for initialization code only</title><link href="//codehopper.nl/2015/01/31/spring-environment-only-for-init/" rel="alternate" type="text/html" title="Spring Environment is for initialization code only" /><published>2015-01-31T00:00:00+01:00</published><updated>2015-01-31T00:00:00+01:00</updated><id>//codehopper.nl/2015/01/31/spring-environment-only-for-init</id><content type="html" xml:base="//codehopper.nl/2015/01/31/spring-environment-only-for-init/">&lt;p&gt;Since version 3.1, the &lt;a href=&quot;https://spring.io/&quot;&gt;Spring framework&lt;/a&gt; offers an abstraction towards several different
sources through which you can easily configure your application: the &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/Environment.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post I describe a micro benchmark that I ran to prove that, while it’s a convenient API if you’re
using Spring in your application, it might introduce a performance penalty for which you should not use it
outside of your initialization code.&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works&lt;/h1&gt;

&lt;p&gt;Before getting into the numbers, a quick digression on the internals of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; that are important
to this post.&lt;/p&gt;

&lt;p&gt;From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;em&gt;Properties play an important role in almost all applications, and may originate from a variety of sources: properties files, JVM system properties, system environment variables, JNDI, servlet context parameters, ad-hoc Properties objects, Maps, and so on. The role of the environment object with relation to properties is to provide the user with a convenient service interface for configuring property sources and resolving properties from them.&lt;/em&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; to have a common interface to properties provided with different strategies, using
a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;getProperty&lt;/code&gt; call to access the required value. Look at the following Groovy code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here be magic&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi, ${user}!&quot;&lt;/span&gt;
                         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi, ${nick}!&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, I can specify nicknames in a properties file so that I can greet know users with a more familiar nick name,
still being able to salute also users which are not given a nickname. Neat, but how about performance?&lt;/p&gt;

&lt;h1 id=&quot;the-hidden-exception&quot;&gt;The hidden Exception&lt;/h1&gt;

&lt;p&gt;I got into this exercise while debugging a couple of slow pages in the website I’m working on: the
&lt;a href=&quot;http://www.klm.com/destinations/nl/en/search&quot;&gt;destinations pages&lt;/a&gt; of the KLM main site. While performance is generally
satisfactory, two pages were constantly giving above second response times. Definitely &lt;a href=&quot;http://www.vm.ibm.com/devpages/jelliott/evrrt.html&quot;&gt;too much&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our code, we were translating some country names into queriable keys for an external services. We also needed to override
an otherwise straightforward translation algorithm with very specific exceptions to the rule. The actual code was pretty much
like the above &lt;code class=&quot;highlighter-rouge&quot;&gt;Greeter.greet(user)&lt;/code&gt;, and a &lt;a href=&quot;http://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/run.htm&quot;&gt;Flight Recorder&lt;/a&gt; session
eventually provided us with the performance bottleneck (click to open):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/post/exceptions.png&quot;&gt;&lt;img style=&quot;width: 500px&quot; src=&quot;/img/post/exceptions.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For 12 page refreshes we were silently throwing 140k+ exceptions. And exceptions are
&lt;a href=&quot;http://java-performance.info/throwing-an-exception-in-java-is-very-slow/&quot;&gt;sloooooow&lt;/a&gt;, even if you just create them.&lt;/p&gt;

&lt;p&gt;Looking at the top thrown exception, it was actually pretty
easy to understand what’s going on: the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; checks whether the requested property is defined in the current JNDI context. But, if the
name is not found, a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/naming/NameNotFoundException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NameNotFoundException&lt;/code&gt;&lt;/a&gt; is thrown. In our specific case we were using property lookup for &lt;em&gt;exceptional&lt;/em&gt; cases,
which means the vast majority of cases resulted in an exception being thrown.&lt;/p&gt;

&lt;h1 id=&quot;micro-benchmark&quot;&gt;Micro benchmark&lt;/h1&gt;

&lt;p&gt;I put together a &lt;a href=&quot;https://gist.github.com/skuro/648cf1d871d203a73a0c&quot;&gt;micro benchmark&lt;/a&gt; to evaluate the potential performance gain
of the original property lookup strategy versus a simpler one where relevant properties are loaded up at class construction time. I used the
&lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;Java Microbenchmark Harness&lt;/a&gt;, which does an incredible job at making micro benchmarks
easy on the JVM: JIT, warm up, class loading, all is taken care of for you and you can just go ahead and put your code under test. Here the results
(higher numbers better):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[Property lookup per invocation]&lt;/p&gt;

    &lt;p&gt;Result: 28917.876 ?(99.9%) 183.630 ops/s [Average] &lt;br /&gt;
Statistics: (min, avg, max) = (25688.067, 28917.876, 30976.876), stdev = 777.500 &lt;br /&gt;
&lt;strong&gt;Confidence interval (99.9%): [28734.246, 29101.505]&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[Property loading at class construction]&lt;/p&gt;

    &lt;p&gt;Result: 159062.900 ?(99.9%) 1013.309 ops/s [Average] &lt;br /&gt;
Statistics: (min, avg, max) = (138707.926, 159062.900, 177183.549), stdev = 4290.413 &lt;br /&gt;
&lt;strong&gt;Confidence interval (99.9%): [158049.591, 160076.209]&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;As expected, five times as fast.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;I’m not a big fan of Spring, but if you’re using it the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; class is a dead easy interface to your application configuration. But,
unless you’re using JNDI as your main store of configuration  properties,
its performance characteristics make it a great tool only if you’re using it in your initialization code, and not during on-line processing of
requests.&lt;/p&gt;</content><category term="java" /><category term="performance" /><summary>Since version 3.1, the Spring framework offers an abstraction towards several different
sources through which you can easily configure your application: the Environment.</summary></entry><entry><title>Alfresco H2 support releases and versioning scheme</title><link href="//codehopper.nl/2014/07/06/alfresco-h2-support-new-releases-version-scheme/" rel="alternate" type="text/html" title="Alfresco H2 support releases and versioning scheme" /><published>2014-07-06T00:00:00+02:00</published><updated>2014-07-06T00:00:00+02:00</updated><id>//codehopper.nl/2014/07/06/alfresco-h2-support-new-releases-version-scheme</id><content type="html" xml:base="//codehopper.nl/2014/07/06/alfresco-h2-support-new-releases-version-scheme/">&lt;p&gt;Some time has passed since the &lt;a href=&quot;/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/&quot;&gt;last releases&lt;/a&gt;, and all the merits go once again to our dear &lt;a href=&quot;http://springyweb.com/&quot;&gt;John Evans&lt;/a&gt; from &lt;a href=&quot;http://www.ixxus.com/&quot;&gt;Ixxus&lt;/a&gt;. Let’s see what’s new in the project.&lt;/p&gt;

&lt;h1 id=&quot;lots-of-releases-now-with-a-new-version-scheme&quot;&gt;Lots of releases, now with a new version scheme!&lt;/h1&gt;

&lt;p&gt;We were lagging behind Alfresco releases quite a bit, so you now have quite some &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;new releases&lt;/a&gt; to look at. Most importantly, starting with Alfresco 4.2.0 we decided to align H2 Support with the official Alfresco versioning. So, while H2 Support v1.7 and v1.8 are the ones to be used respectively with Alfresco Enterprise 4.1.5 and 4.1.6, you will easily guess what versions of Alfresco Enterprise will have to use H2 Support v4.2.0 and v4.2.1.&lt;/p&gt;

&lt;p&gt;Say your Alfresco v4.2.0 project is based on the &lt;a href=&quot;https://code.google.com/p/maven-alfresco-archetypes/&quot;&gt;maven archetypes&lt;/a&gt; (and shame on you if it’s not), then you could simply override the following &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt; in your pom:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2-support.version&amp;gt;&lt;/span&gt;${alfresco.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2-support.version&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- WARN WARN WARN!! --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Neah huh? But there’s a big &lt;code class=&quot;highlighter-rouge&quot;&gt;WARN&lt;/code&gt; sign in there, why’s that?&lt;/p&gt;

&lt;p&gt;Say the release of H2 Support is broken in any way (in theory it should never happen, but in practice it might happen). Then it might be a bit unfortunate if your poms rely on H2 Support and Alfresco to have exactly the same version. So, while the above should work in most cases, the preferred way to include H2 Support in your project is still as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2-support.version&amp;gt;&lt;/span&gt;4.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2-support.version&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- much better! --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;plans-for-the-future&quot;&gt;Plans for the future&lt;/h1&gt;

&lt;p&gt;In the future we plan to have a different strategy to bring H2 Support for Alfresco. Currently, we simply copy all the PostgreSQL in an H2 friendly package, so that the internal Alfresco machinery will automatically find them. Then, H2 compatibility mode is used to make the PostgreSQL dialect understood by the H2 driver. That’s obviously suboptimal, and we will research methods to skip shuffling files around, but rather override the Alfresco SQL files locator strategy. The new strategy should provide a better integration with any Alfresco release, and we might very well need not new H2 Support releases per Alfresco version.&lt;/p&gt;

&lt;p&gt;If you’d like to help us realizing this integration sweet spot, you’re so much welcome to joink the H2 Support crew!&lt;/p&gt;</content><category term="alfresco" /><category term="alm" /><category term="h2-support" /><category term="maven" /><summary>Some time has passed since the last releases, and all the merits go once again to our dear John Evans from Ixxus. Let’s see what’s new in the project.</summary></entry><entry><title>SeedUML, an online PlantUML editor</title><link href="//codehopper.nl/2014/02/09/seeduml-an-online-plantuml-editor/" rel="alternate" type="text/html" title="SeedUML, an online PlantUML editor" /><published>2014-02-09T00:00:00+01:00</published><updated>2014-02-09T00:00:00+01:00</updated><id>//codehopper.nl/2014/02/09/seeduml-an-online-plantuml-editor</id><content type="html" xml:base="//codehopper.nl/2014/02/09/seeduml-an-online-plantuml-editor/">&lt;h1 id=&quot;finally-online&quot;&gt;Finally online&lt;/h1&gt;

&lt;p&gt;It’s my pleasure to announce the availability of &lt;a href=&quot;http://seeduml.com&quot;&gt;SeedUML&lt;/a&gt;, the online editor for UML diagrams based on the great &lt;a href=&quot;http://plantuml.sourceforge.net/&quot;&gt;PlantUML language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As it’s in its early beta stages, I’m sure you’ll find some rough edges here and there, but there’s some great and useful features I’m sure you’ll love. Especially if you’re new to PlantUML, you’ll find a damn easy way to create all sorts of UML diagrams, like &lt;a href=&quot;http://seeduml.com/GBK3c&quot;&gt;state&lt;/a&gt;, &lt;a href=&quot;http://seeduml.com/Nmr0D&quot;&gt;sequence&lt;/a&gt;, &lt;a href=&quot;http://seeduml.com/Jgfv9&quot;&gt;class&lt;/a&gt;, etc, all with a crystal clear plain text description. The diagram updates as you type, and you can save the image for later use, or simply link it wherever you need it to show up.&lt;/p&gt;

&lt;h1 id=&quot;quick-user-guide&quot;&gt;Quick user guide&lt;/h1&gt;

&lt;p&gt;If you need an user guide, the site is itself not easy enough to use. But let’s give a couple of pointers to start with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you need to start a new diagram, you go to &lt;a href=&quot;http://seeduml.com&quot;&gt;http://seeduml.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;a random diagram ID is generated, and you’ll be redirected to such diagram page (eg: &lt;a href=&quot;http://seeduml.com/GBK3c&quot;&gt;http://seeduml.com/GBK3c&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;remember to bookmark the URL if the diagram is important, as there’s no user save&lt;/li&gt;
  &lt;li&gt;you follow PlantUML docs and create beautiful diagram&lt;/li&gt;
  &lt;li&gt;whenever you need to edit the doc again, you go back to the same URL (you bookmarked it, right?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done. Easy, huh?&lt;/p&gt;

&lt;h1 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This is an &lt;strong&gt;early beta&lt;/strong&gt;, use at your own risk (and pleasure, hopefully). Especially, don’t expect to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;be guaranteed that your diagrams will stay there forever&lt;/li&gt;
  &lt;li&gt;the service will be up and running at all times&lt;/li&gt;
  &lt;li&gt;be able to save hidden diagrams&lt;/li&gt;
  &lt;li&gt;have a rock solid syntax highlight&lt;/li&gt;
  &lt;li&gt;etc etc etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will share some of the juicy technical details of that site later on on these pages, but for now, have fun and happy diagram authoring!&lt;/p&gt;</content><category term="seeduml" /><category term="uml" /><category term="design" /><category term="software" /><summary>Finally online</summary></entry><entry><title>H2 support 1.1.1 for Alfresco 3.4.12 Enterprise with Maven</title><link href="//codehopper.nl/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/" rel="alternate" type="text/html" title="H2 support 1.1.1 for Alfresco 3.4.12 Enterprise with Maven" /><published>2013-03-27T00:00:00+01:00</published><updated>2013-03-27T00:00:00+01:00</updated><id>//codehopper.nl/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven</id><content type="html" xml:base="//codehopper.nl/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/">&lt;p&gt;Just a quick update on the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;H2 support&lt;/a&gt;
project, today I released the &lt;code class=&quot;highlighter-rouge&quot;&gt;1.1.1&lt;/code&gt; maintenance version which targets
Alfresco v3.4.12 Enterprise.&lt;/p&gt;

&lt;p&gt;Please make sure you always double check the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;official documentation&lt;/a&gt;
to pick and choose the right version to use in your Alfresco project.&lt;/p&gt;

&lt;h1 id=&quot;h2-and-maven&quot;&gt;H2 and Maven&lt;/h1&gt;

&lt;p&gt;For &lt;del&gt;the sane&lt;/del&gt; those among you that use the &lt;a href=&quot;https://artifacts.alfresco.com/nexus/content/repositories/alfresco-docs/alfresco-lifecycle-aggregator/latest/index.html&quot;&gt;Maven SDK&lt;/a&gt;,
you should know that &lt;code class=&quot;highlighter-rouge&quot;&gt;H2 support&lt;/code&gt; is used to quickly boot the Alfresco repository
webapp during your development cycles.&lt;/p&gt;

&lt;p&gt;If you’re using a version of Alfresco other than the default 4.x that’s assumed
by the SDK, you must also adapt your H2 support version to be able to start up
Alfresco. It’s as easy as overriding the following maven property:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h2-support.version&amp;gt;1.1.1&amp;lt;/h2-support.version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Happy development!&lt;/p&gt;</content><category term="alfresco" /><category term="h2support" /><category term="maven" /><category term="sonatype" /><summary>Just a quick update on the H2 support
project, today I released the 1.1.1 maintenance version which targets
Alfresco v3.4.12 Enterprise.</summary></entry><entry><title>Java StringBuilder myth debunked – now with content!</title><link href="//codehopper.nl/2013/03/11/java-stringbuilder-myth-now-with-content/" rel="alternate" type="text/html" title="Java StringBuilder myth debunked -- now with content!" /><published>2013-03-11T00:00:00+01:00</published><updated>2013-03-11T00:00:00+01:00</updated><id>//codehopper.nl/2013/03/11/java-stringbuilder-myth-now-with-content</id><content type="html" xml:base="//codehopper.nl/2013/03/11/java-stringbuilder-myth-now-with-content/">&lt;h1 id=&quot;the-myth&quot;&gt;The myth&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concatenating two Strings with the plus operator is the source of all evil&lt;/p&gt;

  &lt;p&gt;– Anonymous Java dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The source code for the tests discussed here can be found on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s from university time that I learned to regard &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; concatenation in Java
using the ‘+’ plus operator as a deadly performance sin. Recently there has been
an internal review at &lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase R&amp;amp;D&lt;/a&gt; where such recurring
mantra was dismissed as a myth due to &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; under the hood
any time you use the plus operator to join Strings. I set myself up to prove
such a point and verify the reality under different environments.&lt;/p&gt;

&lt;h1 id=&quot;the-test&quot;&gt;The test&lt;/h1&gt;

&lt;p&gt;Relying on your compiler to optimize your &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; concatenation means that things
might change heavily depending on the JDK vendor you adopt. As far as platform
support goes for my daily job, three main vendors should be considered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle JDK&lt;/li&gt;
  &lt;li&gt;IBM JDK&lt;/li&gt;
  &lt;li&gt;ECJ – for developers only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, while we officially support Java 5 through 6, we are also looking into
supporting Java 7 for our products, adding another three-folded level of indirection on top of
the three vendors. For the sake of &lt;del&gt;lazyness&lt;/del&gt; simplicity, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ecj&lt;/code&gt; compiled
bytecode will be run with a single JDK, namely Oracle JDK7.&lt;/p&gt;

&lt;p&gt;I prepared a &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; VM with all the above JDK
installed, then I developed some classes to express three different concatenation
methods, amounting to three to four concatenations per method invocaiton,
depending on the specific test case.&lt;/p&gt;

&lt;p&gt;The test classes are run a thousands times for each test round, with a total of
100 rounds each test case. The same VM is used to run all the rounds for the same
test case, and it’s restarted across different test cases, all to let the Java
runtime perform all the optimizations it can, without affecting the other test
cases in any way. The default options were used to start all JVMs.&lt;/p&gt;

&lt;p&gt;More details can be found in the benchmark runner &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/bench.sh&quot;&gt;script&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-code&quot;&gt;The code&lt;/h1&gt;

&lt;p&gt;Full code for both test cases and the test suite is available on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following different test cases were produced to measure performance
differences of the String concatenation with plus against the direct use of a
&lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// String concat with plus
String result = &quot;const1&quot; + base;
result = result + &quot;const2&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// String concat with a StringBuilder
new StringBuilder()
              .append(&quot;const1&quot;)
              .append(base)
              .append(&quot;const2&quot;)
              .append(append)
              .toString();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//String concat with an initialized StringBuilder
new StringBuilder(&quot;const1&quot;)
              .append(base)
              .append(&quot;const2&quot;)
              .append(append)
              .toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The general idea is to provide a concatenation both at the head and at the tail
of constant &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;s over a variable. The difference between the last two cases,
both making explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;, is in the latter using the 1-arg
constructor which initializes the builder with the initial part of the result.&lt;/p&gt;

&lt;h1 id=&quot;the-results&quot;&gt;The results&lt;/h1&gt;

&lt;p&gt;Enough talking, down below here you can have a look at the generated graphs, where
each data point corresponds to a single test round (e.g. 1000 executions of the same
test class).&lt;/p&gt;

&lt;p&gt;The discussion of the results and some more juicy details will follow.&lt;/p&gt;

&lt;h2 id=&quot;concatenation-with-pluscatplus&quot;&gt;&lt;img src=&quot;/img/post/catplus.png&quot; alt=&quot;Concatenation with plus&quot; title=&quot;Concatenation with plus&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/catsb.png&quot; alt=&quot;Concatenation with StringBuilder&quot; title=&quot;Concatenation with StringBuilder&quot; /&gt;
—-
&lt;img src=&quot;/img/post/catsb2.png&quot; alt=&quot;Concatenation with initialized StringBuilder&quot; title=&quot;Concatenation with initalized StringBuilder&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-discussion&quot;&gt;The discussion&lt;/h1&gt;

&lt;p&gt;Oracle JKD5 is the clear loser here, appearing to be in a B league when compared
to the others. But that’s not really the scope of this exercise, and thus we’ll
gloss over it for the time being.&lt;/p&gt;

&lt;p&gt;That said, there are two other interesting bits I observe in the above graph. The first is that indeed
there is generally quite a difference between the use of the plus operator vs an explicit
&lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;, &lt;em&gt;especially&lt;/em&gt; if you’re using Oracle Java5 which performs tree
times worse the the rest of the crew.&lt;/p&gt;

&lt;p&gt;The second observation is that while it generally holds for most of the JDKs that
an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; will offer up to twice the speed as the regular plus
operator, &lt;strong&gt;IBM JDK6 seems not to suffer&lt;/strong&gt; from any performance loss, always averaging
25ms to complete the task in all test cases.&lt;/p&gt;

&lt;p&gt;A closer look at the generated bytecode reveals some interesting details&lt;/p&gt;

&lt;h1 id=&quot;the-bytecode&quot;&gt;The bytecode&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the decompiled classes are also available on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Across all possible JDKs &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilders&lt;/code&gt; are &lt;strong&gt;always&lt;/strong&gt; used to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;
concatenation even in presence of a plus sign.
Moreover, across all vendors and versions, &lt;strong&gt;there is almost no difference at all&lt;/strong&gt;
for the same test case. The only one that stands a bit apart is &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatPlus.class.txt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ecj&lt;/code&gt;&lt;/a&gt;,
which is the only one to cleverly optimize the &lt;code class=&quot;highlighter-rouge&quot;&gt;CatPlus&lt;/code&gt; test case to invoke
the 1-arg constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; instead of the 0-arg version.&lt;/p&gt;

&lt;p&gt;Comparing the resulting bytecode exposes what could affect performance in the
different scnarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;when concatenating with plus, &lt;em&gt;new instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;&lt;/em&gt; are created
any time a concatenation happens. This can easily result in a performance
degradation due to useless invocation of the constructor plus more stress on
the garbage collector due to throw away instances&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compilers will take you literally and only initalize &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; with its
1-arg constructor if and only if you write it that way in the original code. This
results in respectively four and three invocations of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder.append&lt;/code&gt; for
&lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatSB.class.txt&quot;&gt;CatSB&lt;/a&gt; and &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatSB2.class.txt&quot;&gt;CatSB2&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-conclusion&quot;&gt;The conclusion&lt;/h1&gt;

&lt;p&gt;Bytecode analysis offers the final answer to the original question.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you need to explicitly use a &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; to improve performance? &lt;strong&gt;Yes&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above graphs clearly show that, unless you’re using IBM JDK6 runtime, you will
loss 50% performance when using the plus operator, although it’s the one to perform
slightly worse across the candidates when expliciting &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Also, it’s quite interesting to see how &lt;em&gt;JIT optimizations&lt;/em&gt; impact the overall
performance: for instance, even in presence of different bytecode between the two
explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; test cases, the end result is absolutely the same in the
long run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/myth-confirmed.jpg&quot; alt=&quot;Myth confirmed&quot; /&gt;&lt;/p&gt;</content><category term="java" /><category term="performance" /><category term="development" /><summary>The myth</summary></entry><entry><title>The Observer Pattern in Spring</title><link href="//codehopper.nl/2013/03/10/observer-pattern-spring-framework/" rel="alternate" type="text/html" title="The Observer Pattern in Spring" /><published>2013-03-10T00:00:00+01:00</published><updated>2013-03-10T00:00:00+01:00</updated><id>//codehopper.nl/2013/03/10/observer-pattern-spring-framework</id><content type="html" xml:base="//codehopper.nl/2013/03/10/observer-pattern-spring-framework/">&lt;h1 id=&quot;observers-in-spring&quot;&gt;Observers in Spring&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;To the man-in-the-street, who, I’m sorry to say,&lt;br /&gt;
Is a keen observer of life,&lt;br /&gt;
The word “Intellectual” suggests straight away&lt;br /&gt;
A man who’s untrue to his wife.&lt;/p&gt;

  &lt;p&gt;– W.H. Auden&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Observer pattern is a very basic one out of the GoF bible which is unbelivably easy to implement and still quote
powerful so use. Here I present my take on it using the Spring observer pattern which I found quite helpful in designing
extension points for my software.&lt;/p&gt;

&lt;h1 id=&quot;core-classes&quot;&gt;Core classes&lt;/h1&gt;

&lt;p&gt;Pushing back the little NIH devil whispering in my ears, I started by reusing the standard building blocks for the
Observer pattern: &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Observable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Observer&lt;/code&gt;. The Observable class provides the logic to handle a
registry of Observers, and to propagate updates (I prefer to think more of in terms of events) to all of the registered
Observers.&lt;/p&gt;

&lt;p&gt;In the context of a Spring container, there will be beans to configure and hook together, and it’s key to this exercise
to find a flexible and handy way to connect things together.&lt;/p&gt;

&lt;h1 id=&quot;automatic-registration&quot;&gt;Automatic registration&lt;/h1&gt;

&lt;p&gt;Supporting code for this blog post can be found on &lt;a href=&quot;https://github.com/skuro/spring-observer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When developing a Spring application you’re always instantiating your classes as singletons within the Spring container.
Annotations or XML configurations will take care  of initialize instances of your classes, wiring them together in a
connected graph of objects with loose dependencies on the specific concrete classes you adopt in your code.&lt;/p&gt;

&lt;p&gt;As you will always have to declare beans, it would be nice to let Spring wire obects for you in an Observer fashion,
with a minimal coding effort required. The most minimalistic approach I could think of is to just require developers to
declare their observer beans, and put in place enough machinery to automatically hook them to an Observable provided by
the application. In this example I create a &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObserver&lt;/code&gt;
tagging interface to identify which beans are actually declaring valid Observers, and register them automatically.&lt;/p&gt;

&lt;p&gt;To complete the picture, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObservable&lt;/code&gt; interface declares which &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; class it’s able to notify, thus
leveraging the tagging interface and letting the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; know which beans to filter and registser.&lt;/p&gt;

&lt;p&gt;This enables a software component to provide the desired &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObservable&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; beans, where
consumers of such API will be only required to instantiate their &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; beans.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;Observers&lt;/code&gt; can be themselves &lt;code class=&quot;highlighter-rouge&quot;&gt;Observables&lt;/code&gt;, so that you can easily construct chains of beans in which events
will be propagated. As long as you ensure not to form any cyclic graph, of course.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;In object oriented languages such as Java, patterns are a powerful tool to apply. The Observer is a neat strategy for
cascading changes on objects, or just to propagate events through a series of processors. All in a clean, loosly coupled
fashion.&lt;/p&gt;

&lt;p&gt;The code here is just a proof of concept, not a library which is intended for production use. The concepts and the
implementation are easy enough to be applied in your Spring application without any need for depending on this code.&lt;/p&gt;</content><category term="java" /><category term="spring" /><category term="patterns" /><summary>Observers in Spring</summary></entry><entry><title>Java StringBuilder myth debunked</title><link href="//codehopper.nl/2013/03/06/java-stringbuilder-myth/" rel="alternate" type="text/html" title="Java StringBuilder myth debunked" /><published>2013-03-06T00:00:00+01:00</published><updated>2013-03-06T00:00:00+01:00</updated><id>//codehopper.nl/2013/03/06/java-stringbuilder-myth</id><content type="html" xml:base="//codehopper.nl/2013/03/06/java-stringbuilder-myth/">&lt;p&gt;&lt;em&gt;NOTE: this post was published before it was ready, the real content can now be found &lt;a href=&quot;2013/03/11/java-stringbuilder-myth-now-with-content/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><category term="java" /><category term="performance" /><category term="development" /><summary>NOTE: this post was published before it was ready, the real content can now be found here</summary></entry><entry><title>A svn post commit hook to comment on Jira</title><link href="//codehopper.nl/2013/02/18/svn-postcommit-hook-jira-comments/" rel="alternate" type="text/html" title="A svn post commit hook to comment on Jira" /><published>2013-02-18T00:00:00+01:00</published><updated>2013-02-18T00:00:00+01:00</updated><id>//codehopper.nl/2013/02/18/svn-postcommit-hook-jira-comments</id><content type="html" xml:base="//codehopper.nl/2013/02/18/svn-postcommit-hook-jira-comments/">&lt;p&gt;If I had to pick a single thing that really bothers me of &lt;a href=&quot;https://confluence.atlassian.com/display/AOD/JIRA+OnDemand&quot;&gt;Jira OnDemand&lt;/a&gt;
is that it &lt;a href=&quot;https://jira.atlassian.com/browse/AOD-710&quot;&gt;doesn’t support our hosted svn&lt;/a&gt; in any
possible way.&lt;/p&gt;

&lt;p&gt;The biggest pain developers like me have without any basic integration between the VCS and the ticketing system is that any time you have to
test an issue, perform some code reviews, sort out some merging or simply digging the history of a given piece of code, it wastes your time to
switch between all of your unconnected tools to accomplish your task. As an example, at &lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase&lt;/a&gt; we use
&lt;a href=&quot;http://trac.edgewall.org/&quot;&gt;Trac&lt;/a&gt; to look at our code on a browser, and we end up having to type URLs by hand to switch on and off Jira.&lt;/p&gt;

&lt;p&gt;How hard could it be to simply &lt;em&gt;link&lt;/em&gt; Jira to our commits?&lt;/p&gt;

&lt;h2 id=&quot;a-hint-to-the-solution&quot;&gt;A hint to the solution&lt;/h2&gt;

&lt;p&gt;Looking at a way to fix this issue, I first had an intuition: what our Jira &lt;em&gt;does&lt;/em&gt; support are web links to an issue. Trac is
just another web site, why can’t we use application links instead of listing the commit messages as Jira comments? After all,
there’s a &lt;a href=&quot;https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+for+Remote+Issue+Links&quot;&gt;rich API&lt;/a&gt; that I can use to
script the hell out of our commits! It literally took me 40 minutes to come up with the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/skuro/4981464.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It currently features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;creates a &lt;em&gt;Related commits&lt;/em&gt; link on each Jira issue mentioned in your commit comment&lt;/li&gt;
  &lt;li&gt;multiple Jira keys in the same commit message supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it. Not an impressive list of features, but enough for 40m hacking on bash scripts. When we’ll have this hook installed
in our svn server, we can easily go from the Jira issue to all the diffs associated with it.&lt;/p&gt;

&lt;p&gt;This facilitates code reviews and
issue verification or analysis at a later stage, enormously simplifying the life of every developer by providing that dead-simple
integration that Atlassian doesn’t want to provide out of the box.&lt;/p&gt;

&lt;p&gt;I understand the performance reasons behind avoid fully integrating
on-premise svn with OnDemand instances. Still, they could do much, much better than say they’re sorry and live their customers
lives being miserable because of it.&lt;/p&gt;</content><category term="subversion" /><category term="jira" /><category term="development" /><category term="software" /><summary>If I had to pick a single thing that really bothers me of Jira OnDemand
is that it doesn’t support our hosted svn in any
possible way.</summary></entry></feed>
