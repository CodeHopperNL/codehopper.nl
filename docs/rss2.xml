<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text" xml:lang="en">CodeHopper -- Software done right</title>
    <link type="application/atom+xml" href="http://localhost:4000/rss2.xml" rel="self"/>
    <link type="text" href="http://localhost:4000/rss2.xml" rel="alternate"/>
    <link href="http://localhost:4000" />
    <updated>2025-06-15T15:33:28+02:00</updated>
    <id>http://localhost:4000</id>
    <author>
        <name>Carlo Sciolla</name>
    </author>
    <rights>Copyright (c) 2010-2019 Carlo Sciolla</rights>
    
<entry>
  <title>A (not so) fresh start</title>
  <link href="http://localhost:4000/2025/02/22/a-not-so-fresh-start/" rel="alternate" />
  <updated>2025-02-22T00:00:00+01:00</updated>
  <id>http://localhost:4000/2025/02/22/a-not-so-fresh-start/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;There is no real ending. It’s just the place where you stop the story.&lt;br /&gt;
– Frank Herbert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;writing-content-in-the-age-of-generative-ai&quot;&gt;Writing content in the age of generative AI&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/2008/12/20/here-we-are-again/&quot;&gt;Already in 2008&lt;/a&gt; I had my doubts that writing into a Blog was really going to be a long running endeavor, and especially now that a growing % of the
content that we consume comes straight out of an LLM it seems like maintaining an active blog is the least thing the world needs me to do.&lt;/p&gt;

&lt;p&gt;And yet, guess what? I feel like writing again 😱&lt;/p&gt;

&lt;p&gt;So yeah, you might read some stories here in the coming days / months / years / whatever time frame that will be. In the meanwhile, you can have fun with &lt;a href=&quot;https://claude.site/artifacts/89e53e5d-b735-4aa4-8264-5e9e122349e0&quot;&gt;an LLM-generated game of
life&lt;/a&gt;, courtesy of Claude.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>gcloud and kubectl on GCP ubuntu images</title>
  <link href="http://localhost:4000/2019/10/11/gcloud-and-kubectl-on-gcp-ubuntu/" rel="alternate" />
  <updated>2019-10-11T00:00:00+02:00</updated>
  <id>http://localhost:4000/2019/10/11/gcloud-and-kubectl-on-gcp-ubuntu/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;morning glory!&lt;br /&gt;
the well bucket-entangled,&lt;br /&gt;
I ask for water&lt;br /&gt;
– Fukuda Chiyo-ni&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;yet-another-versioning-issue&quot;&gt;Yet another versioning issue&lt;/h2&gt;

&lt;p&gt;Versioning is &lt;a href=&quot;/2018/05/28/a-tale-of-emacs-clojure-and-pinned-packages/&quot;&gt;a recurring PITA in my life&lt;/a&gt;, it seems. Today I ran (for the second time on the same machine, actually) into an issue with &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;&lt;/a&gt; commands run from my CI server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get https://172.16.0.2/api?timeout=32s: error executing access token command &quot;/snap/google-cloud-sdk/100/bin/gcloud config config-helper --format=json&quot;: err=fork/exec /snap/google-cloud-sdk/100/bin/gcloud: no such file or directory output= stderr=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual error message was longer than that, but it basically tells me that my &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; commands that I run to deploy new versions of some applications in our &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt; cluster failed. More
specifically, it encountered an &lt;code class=&quot;highlighter-rouge&quot;&gt;error executing acces token command ...&lt;/code&gt;. What’s that? And how to fix it? Well there are a few ingredients to the mix.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

&lt;p&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/snap/google-cloud-sdk/current&lt;/code&gt; symlink instead of the bespoke snap version number of your &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; SDK:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ibak&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/(\/snap\/google-cloud-sdk\/)(.*)(\/bin\/gcloud)/\1current\3/'&lt;/span&gt; ~/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# extended regex&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-ibak&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# edit in place, create a ~/.kube/config.bak backup file&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'s/(\/snap\/google-cloud-sdk\/)(.*)(\/bin\/gcloud)/\1current\3/'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# replace the version number with `current`&lt;/span&gt;
    ~/.kube/config &lt;span class=&quot;c&quot;&gt;# file to update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;authentication-in-kubectl&quot;&gt;Authentication in &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you want more low level details you should definitely go to &lt;a href=&quot; https://kubernetes.io/docs/reference/access-authn-authz/authentication/&quot;&gt;the official documentation&lt;/a&gt;. Here, suffice it so say that I used the following command to configure my &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; access to
the cluster[&lt;a href=&quot;https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials&quot;&gt;↪&lt;/a&gt;]:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud container clusters get-credentials &amp;lt;my-cluster-name&amp;gt; --zone &amp;lt;my-cluster-zone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s automagically creating your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt; file with everything you need to connect to a specific cluster. Then you’re supposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; happily ever after, with &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; being directly
invoked to retrieve the authentication tokens automagically. Until..&lt;/p&gt;

&lt;h3 id=&quot;oh-snap&quot;&gt;Oh, snap!&lt;/h3&gt;

&lt;p&gt;The thing I didn’t expect was a poor synergy with the Google Cloud SDK installation and the produced &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; configuration. There’s a few ingredients to the mix:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the machine that’s running all of the above commands was created using the Google official &lt;a href=&quot;https://cloud.google.com/compute/docs/images#os-compute-support&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu-1804-lts&lt;/code&gt; image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;in that machine, the Google Cloud SDK is installed using [Snapcraft][https://snapcraft.io/]&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; stores it’s own binary &lt;em&gt;full path&lt;/em&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kubectl/config&lt;/code&gt; which is what shows up in the above error message, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;na&quot;&gt;auth-provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cmd-args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config config-helper --format=json&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cmd-path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/snap/google-cloud-sdk/100/bin/gcloud&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;snaps are updated &lt;a href=&quot;https://snapcraft.io/docs/keeping-snaps-up-to-date&quot;&gt;frequently&lt;/a&gt;, installing new versions into &lt;code class=&quot;highlighter-rouge&quot;&gt;/snap/google-cloud-sdk/$VERSION&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The salvation is provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;/snap/google-cloud-sdk/current&lt;/code&gt; symlink which is always updated by &lt;code class=&quot;highlighter-rouge&quot;&gt;snapd&lt;/code&gt; upon installation, making the &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; script above fix the issue once and for
all. Kinda. There are multiple users on the machine I’m using, and the above configuration is user specific. Hence why I faced this issue &lt;em&gt;twice&lt;/em&gt; on the same machine. Welp.&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>Clojure GitLab deps</title>
  <link href="http://localhost:4000/2018/09/27/clojure-gitlab-deps/" rel="alternate" />
  <updated>2018-09-27T00:00:00+02:00</updated>
  <id>http://localhost:4000/2018/09/27/clojure-gitlab-deps/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;People addicted with technology. &lt;br /&gt;
Technology has indulged mankind. &lt;br /&gt;
Beware of technology dependency! &lt;br /&gt;
– Toba Beta&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR:&lt;/h2&gt;

&lt;p&gt;You need to force the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; host key instead of the default one picked up by the tooling:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen -R gitlab.com
$ cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; ~/.ssh/config

Host gitlab.com
  HostKeyAlgorithms ssh-rsa

EOF
$ ssh git@gitlab.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;csi-version-of-the-above&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CSI:_Crime_Scene_Investigation&quot;&gt;CSI&lt;/a&gt; version of the above&lt;/h2&gt;

&lt;p&gt;You are using the brand new &lt;a href=&quot;https://clojure.org/guides/deps_and_cli&quot;&gt;dependency resolution&lt;/a&gt; from the Clojure core team for the first time. You like the idea of fetching your dependency straight from git. You host all of your repos on
&lt;a href=&quot;https://gitlab.com&quot;&gt;GitLab&lt;/a&gt;, it just makes sense, right? Right.&lt;/p&gt;

&lt;p&gt;You go ahead and start your new project, you just need to bring in the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;me/my-awesome-lib&lt;/code&gt; that you use everywhere. That’s just a new, empty folder in which you configure your &lt;code class=&quot;highlighter-rouge&quot;&gt;deps.edn&lt;/code&gt; like
the following:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:deps&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my-awesome-lib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:git/url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;git@gitlab.com:me/my-awesome-lib.git&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:sha&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;031aa264afc2cf6dee9e12de8b88c608faefea80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No more &lt;code class=&quot;highlighter-rouge&quot;&gt;lein new&lt;/code&gt;, no more templates, no more nothing. You mentally pat yourself on the shoulder.&lt;/p&gt;

&lt;p&gt;You’re now at the terminal, ready to sprinkle your clojure fairy powder all over. You fire &lt;code class=&quot;highlighter-rouge&quot;&gt;clj -m my-awesome-lib.main&lt;/code&gt; and stand in awe as the tool fetches bits from GitLab and…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cloning: git@gitlab.com:me/my-awesome-lib.git
Error building classpath. git@gitlab.com:me/my-awesome-lib.git: UnknownHostKey: gitlab.com. RSA key fingerprint is b6:03:0e:39:97:9e:d0:e7:24:ce:a3:77:3e:01:42:09
org.eclipse.jgit.api.errors.TransportException: git@gitlab.com:me/my-awesome-lib.git: UnknownHostKey: gitlab.com. RSA key fingerprint is b6:03:0e:39:97:9e:d0:e7:24:ce:a3:77:3e:01:42:09
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Damn! Damn. Really? Mhhhhh…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh git@gitlab.com
PTY allocation request failed on channel 0
Welcome to GitLab, @carlo.sciolla!
Connection to gitlab.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems all good. One final check:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep gitlab ~/.ssh/known_hosts
gitlab.com,35.231.145.151 ecdsa-sha2-nistp256 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Things are getting creepy. Worse of it all, you got stuck there. Fortunately, you have a &lt;a href=&quot;https://github.com/eneroth&quot;&gt;little bird&lt;/a&gt; spilling some relevant beans: the specific host key crypto algorithm
(&lt;code class=&quot;highlighter-rouge&quot;&gt;ecdsa-sha2-nistp256&lt;/code&gt; in the above) might be relevant! A lead is a lead, and this feels like a good one. Let’s explore.&lt;/p&gt;

&lt;p&gt;First things first, you need to start from a clean slate. Let’s remove the currently installed host key:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen -R gitlab.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good. Now let’s have a look at what keys are provided by GitLab, just to have a feel for what could be a sensible one to pick:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -Q key git@gitlab.com
ssh-ed25519
ssh-ed25519-cert-v01@openssh.com
ssh-rsa
ssh-dss
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
ssh-rsa-cert-v01@openssh.com
ssh-dss-cert-v01@openssh.com
ecdsa-sha2-nistp256-cert-v01@openssh.com
ecdsa-sha2-nistp384-cert-v01@openssh.com
ecdsa-sha2-nistp521-cert-v01@openssh.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whoa! That’s quite a rich of a menu to choose from. But your spidey senses are tingling: that &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; feels good. Warm. Homey. Or maybe it’s just the closest to what the original error message
said. Whatever, lets tell SSH to pick that one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; ~/.ssh/config

Host gitlab.com
  HostKeyAlgorithms ssh-rsa

EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, time to shine. Let it fly, once again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ clj -m my-awesome-lib.main
Cloning: git@gitlab.com:me/my-awesome-lib.git
Error building classpath. git@gitlab.com:me/my-awesome-lib.git: UnknownHostKey: gitlab.com. RSA key fingerprint is b6:03:0e:39:97:9e:d0:e7:24:ce:a3:77:3e:01:42:09
org.eclipse.jgit.api.errors.TransportException: git@gitlab.com:me/my-awesome-lib.git: UnknownHostKey: gitlab.com. RSA key fingerprint is b6:03:0e:39:97:9e:d0:e7:24:ce:a3:77:3e:01:42:09
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Damn! Really?! “Oh wait!” you think, as you realize that maybe now you need to first get the new host key:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh git@gitlab.com
The authenticity of host 'gitlab.com (35.231.145.151)' can't be established.
RSA key fingerprint is SHA256:ROQFvPThGrW4RuWLoL9tq9I9zJ42fK4XywyRtbOz/EQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'gitlab.com,35.231.145.151' (RSA) to the list of known hosts.
PTY allocation request failed on channel 0
Welcome to GitLab, @carlo.sciolla!
Connection to gitlab.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good! Now, what if… you just did it? “Well, here goes nothing.” you think, mindlessly typing that dreaded command one last time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ clj -m my-awesome-lib.main
Cloning: git@gitlab.com:me/my-awesome-lib.git
Checking out: git@gitlab.com:me/my-awesome-lib.git at 031aa264afc2cf6dee9e12de8b88c608faefea80
Welcome to MyProject!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good. That’s good, really. You feel like you deserve a coffee now. And you do.&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>A tale of Emacs, Clojure and pinned packages</title>
  <link href="http://localhost:4000/2018/05/28/a-tale-of-emacs-clojure-and-pinned-packages/" rel="alternate" />
  <updated>2018-05-28T00:00:00+02:00</updated>
  <id>http://localhost:4000/2018/05/28/a-tale-of-emacs-clojure-and-pinned-packages/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;It’s like trying to pin down a kangaroo on a trampoline.
– Sid Waddel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you do any clojure[script] development, &lt;a href=&quot;https://static1.squarespace.com/static/5372821be4b0aefc6719057e/t/5aafdd7e562fa73957a7b46b/1521474957333/editor.png?format=1000w&quot;&gt;chances are&lt;/a&gt; that
you do so through Emacs and &lt;a href=&quot;https://github.com/clojure-emacs&quot;&gt;CIDER&lt;/a&gt;. The experience is
generally nothing short of &lt;a href=&quot;https://ih1.redbubble.net/image.118710403.1747/flat,800x800,075,f.u2.jpg&quot;&gt;awesome&lt;/a&gt;, but every now and then you
bump into some quirks. That was the case for me when the latest CIDER
came out, mostly due to how I like to keep my Emacs.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;&lt;em&gt;tl;dr&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;CIDER and &lt;code class=&quot;highlighter-rouge&quot;&gt;clj-refactor&lt;/code&gt; have incompatible stable releases for which
you need to make sure the latter comes from &lt;code class=&quot;highlighter-rouge&quot;&gt;melpa-unstable&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;stable-vs-unstable&quot;&gt;Stable vs unstable&lt;/h2&gt;

&lt;p&gt;I use Clojure &lt;a href=&quot;https://synple.eu/en/index&quot;&gt;to pay the bills&lt;/a&gt;, and as such I cannot afford
myself to walk too much on the bleeding edge. That’s why I made sure
all of my Emacs packages come from a slightly trustworthier stream of
stable releases:&lt;/p&gt;

&lt;div class=&quot;language-emacs-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archives&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gnu&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://elpa.gnu.org/packages/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;melpa&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://stable.melpa.org/packages/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;melpa-unstable&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://melpa.org/packages/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archive-priorities&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;melpa&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gnu&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;melpa-unstable&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The priorities set on the package archives make sure that released
packages (from &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;melpa-stable&lt;/code&gt;&lt;/a&gt;) will be installed in
place of their unstable snapshots if they exist. Ideally I’d love to
remove &lt;code class=&quot;highlighter-rouge&quot;&gt;melpa-unstable&lt;/code&gt; from my configuration, but there are cases in
which that’s some necessary evil to keep. Like the reason why I’m
writing this up.&lt;/p&gt;

&lt;h2 id=&quot;cider-and-clj-refactor-and-pinning&quot;&gt;CIDER and &lt;code class=&quot;highlighter-rouge&quot;&gt;clj-refactor&lt;/code&gt; and pinning&lt;/h2&gt;

&lt;p&gt;The latest and gratest CIDER (&lt;code class=&quot;highlighter-rouge&quot;&gt;v0.17.0&lt;/code&gt;) earlier in May 2018, while
the latest &lt;code class=&quot;highlighter-rouge&quot;&gt;clj-refactor&lt;/code&gt; release is pretty ancient, dating back to
June 2017. The two packages are now not compatible, and if you
installed both in your Emacs your REPL will fail to start. This has
been reported many, many, many times in the &lt;code class=&quot;highlighter-rouge&quot;&gt;clj-refactor&lt;/code&gt; issue
tracker, but Java 9 compatibility is &lt;a href=&quot;https://github.com/clojure-emacs/clj-refactor.el/issues/403#issuecomment-357631244&quot;&gt;holding back&lt;/a&gt; any new
releases of &lt;code class=&quot;highlighter-rouge&quot;&gt;clj-refactor&lt;/code&gt;, which means we might be waiting quite some
time before we can have a stable clojure IDE including
refactorings. We need to fiddle around ourselves:&lt;/p&gt;

&lt;div class=&quot;language-emacs-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; manual package pinning:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'package-pinned-packages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clj-refactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;melpa-unstable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; or if you're using `use-package' to install packages:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;clj-refactor&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:ensure&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:pin&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;melpa-unstable&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. You can now safely upgrade your packages and enjoy your
clojure IDE once again.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As duly noted by &lt;code class=&quot;highlighter-rouge&quot;&gt;dantheobserver&lt;/code&gt; &lt;a href=&quot;http://disq.us/p/1svamen&quot;&gt;in the comments&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;use-package&lt;/code&gt;
itself is &lt;a href=&quot;https://github.com/jwiegley/use-package/issues/602&quot;&gt;pending a stable release&lt;/a&gt; for some time now. As
such, you only have one way to properly pin it, similarly to the first option
above:&lt;/p&gt;

&lt;div class=&quot;language-emacs-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'package-pinned-packages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;melpa-unstable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>Void methods as behavior black holes</title>
  <link href="http://localhost:4000/2017/05/22/void-methods-as-behavior-black-holes/" rel="alternate" />
  <updated>2017-05-22T00:00:00+02:00</updated>
  <id>http://localhost:4000/2017/05/22/void-methods-as-behavior-black-holes/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;This post could have been titled ‘Void methods considered harmful’,
if ‘considered harmful’ essays weren’t
&lt;a href=&quot;http://meyerweb.com/eric/comment/chech.html&quot;&gt;considered harmful themselves&lt;/a&gt;. Oh welp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Void methods are ubiquitous in most Object Oriented codebases. A
direct consequence of mutable state or I/O somewhere in your runtime,
you can wrap any behavior that functional programming zealots would
call &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function#Impure_functions_in_pure_expressions&quot;&gt;impure&lt;/a&gt;, which in principle has no meaningful return
value. One common example is during application bootstrap, e.g. in
Java:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TimeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above is supposedly fine, but public void methods, and especially
a proliferation of them in a given codebase, are an evident code
smell. Even when coding in Object Oriented style.&lt;/p&gt;

&lt;h1 id=&quot;your-public-interface&quot;&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; interface&lt;/h1&gt;

&lt;p&gt;Public methods are meant for your class &lt;a href=&quot;https://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&quot;&gt;collaborators&lt;/a&gt; to
consume, they are the gateway to your class functionality. As such,
they should be as clear as concise as possible, offering the minimal
surface area needed to enable your class behaviors. One major,
self-documenting part of any function definition is naturally its
return type.&lt;/p&gt;

&lt;p&gt;Lets start from the previous example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TimeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our class is likely receiving some sort of &lt;code class=&quot;highlighter-rouge&quot;&gt;executorService&lt;/code&gt; instance
at construction time, possibly obtained from some
&lt;a href=&quot;http://imgur.com/iZcUNxH&quot;&gt;dependency injection&lt;/a&gt; glue code, after which a worker schedule
is started. The likelihood of client code needing to explicitly call
&lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; is typically very low. This suggests that our
&lt;code class=&quot;highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt; method should probably have a more restrictive
visibility, maybe &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt;, and that would be the end
of it.&lt;/p&gt;

&lt;p&gt;But, is it really?&lt;/p&gt;

&lt;h1 id=&quot;testability&quot;&gt;Testability&lt;/h1&gt;

&lt;p&gt;Let’s say we want to actually test the shutdown
behavior of our worker threads, typically a tricky thing to do. What
you want to do is something along the lines of:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// changed code from the original MyClass file:&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScheduledFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TimeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testExecutorShutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ScheduledExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newSingleThreadScheduledExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// executorService, enabled&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ScheduledFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// throws exception&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above test code tests that the scheduled action terminates within
1 second (or two scheduled iterations) from the executor
shutdown. Such a test relies on accessing the future object returned
by the init method.&lt;/p&gt;

&lt;h1 id=&quot;self-documenting&quot;&gt;Self documenting&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;it is Human perception that is sealed off behind their current consciousness horizon&lt;/p&gt;

  &lt;p&gt;– &lt;em&gt;Elia Wise&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The change we made to the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; method enabled the behavioral test,
but introduced an important side effect: the &lt;code class=&quot;highlighter-rouge&quot;&gt;ScheduledFuture&lt;/code&gt; object
is now part of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; public interface, meaning that now any client
code is able to interact with it. Whether this is a desirable property
really depends on the use case &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; is designed to support, and
probably you want to encapsulate the &lt;code class=&quot;highlighter-rouge&quot;&gt;ScheduledFuture&lt;/code&gt; in a more
friendly class that e.g. only exposes something like &lt;code class=&quot;highlighter-rouge&quot;&gt;bool
isDone()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In any case, keeping the above &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; method void would always end up
in your client code (or developer glancing at the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; signature
using his/her IDE) being oblivious of what &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass.init()&lt;/code&gt; is really
doing. Just look at the different signatures, and think of yourself
coding against each of them:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScheduledFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the latter one will save you a brain cycle every time you need to use
it, as it clearly states its produced effects without having to look
at the code or at a deeper level of documentation.&lt;/p&gt;

&lt;h1 id=&quot;do-one-thing-and-do-it-well&quot;&gt;Do one thing and do it well&lt;/h1&gt;

&lt;p&gt;Sticking to the idea that your function returns a single value to
explicitly states its behavior is obviously impossible when your
function does more than one thing at a time. Fortunately, that by
itself is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;code smell&lt;/a&gt;, and by treating your
return type as the existential purpose of your functions you make it
one step weirder to violate the principle.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Be nice to your future self and in general to all developers using
your code and never hide such a valuable piece of information like
your return value in your public API, never again.&lt;/p&gt;

&lt;p&gt;Hugs &amp;amp; kisses,
c.&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>Yet another agile is dead post</title>
  <link href="http://localhost:4000/2016/12/05/yet-another-agile-is-dead-post/" rel="alternate" />
  <updated>2016-12-05T00:00:00+01:00</updated>
  <id>http://localhost:4000/2016/12/05/yet-another-agile-is-dead-post/</id>
  <summary type="html">&lt;p&gt;Say you are in the software business for a while, and you worked with many different
organizations on software projects. Say all of them adopted an agile process,
and you had more than your fair share of standups, burndowns, sprints, release
trains and stuff. Now, say someone asks you to draw a picture of &lt;strong&gt;#agile&lt;/strong&gt;,
will that be like this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/wheel.png&quot; alt=&quot;simple agile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No. Effing. Way.&lt;/p&gt;

&lt;h2 id=&quot;agile-is-dead&quot;&gt;Agile is dead&lt;/h2&gt;

&lt;p&gt;I’m by far not the first one on the &lt;a href=&quot;https://www.google.nl/search?q=agile%20is%20dead&quot;&gt;agile is dead bangwagon&lt;/a&gt;.
There is a practically infinite corpus citing how agile is broken, whether because
it lends itself to &lt;a href=&quot;https://effectivesoftwaredesign.com/2014/03/17/the-end-of-agile-death-by-over-simplification/&quot;&gt;oversimplifying our profession&lt;/a&gt; or because it’s
just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;hype come to its end&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Set aside all the good intentions
and &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;compelling ethics&lt;/a&gt;, Agile became way too meta for it to be
any good to anyone. In search for the exact science of process management, people
thought it was in the best interest of everyone to create standards over standards
of supposedly battle-proven methodologies.&lt;/p&gt;

&lt;p&gt;This is what we actually got (&lt;a href=&quot;http://blog.deloitte.com.au/agile/2016/03/07/navigating-the-agile-landscape/#.WEbfLqIrLdQ&quot;&gt;&lt;em&gt;image courtesy of Deloitte&lt;/em&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/agile-landscape.jpg&quot; alt=&quot;real agile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The author of this complex diagram was trying to shed some light on the current
plethora of Agile methodologies that people have been implementing, and while
the result is horrifying from anyone interested into Getting Things Done, it’s
spot on the very issue we have at hand: there is no exact science of management.
We, as a whole industry, should be get over it already.&lt;/p&gt;

&lt;h2 id=&quot;long-live-agile&quot;&gt;Long live agile&lt;/h2&gt;

&lt;p&gt;I believe we’re now at the Agile &lt;a href=&quot;https://en.wikipedia.org/wiki/Antithesis#Hegel_and_antithesis&quot;&gt;antithesis&lt;/a&gt;. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;hype cycle&lt;/a&gt;
is now at the end of the Disillusionment deep, and already getting into
Productivity. The &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;gospel&lt;/a&gt; has been introspected and it’s
simply not a thing to speak of agile anymore.&lt;/p&gt;

&lt;p&gt;Eventually, we’re in the &lt;a href=&quot;https://www.google.nl/search?q=post%20agile&quot;&gt;post-agile&lt;/a&gt;
era already, and we need our IT managers to truly understand what they role
really is, we need them to do their job and understand where the agile script
works, where it doesn’t and ultimately where it enables the whole organization
to really work as it should.&lt;/p&gt;

&lt;p&gt;Amen.&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>Dear future me</title>
  <link href="http://localhost:4000/2016/01/10/a-new-chapter/" rel="alternate" />
  <updated>2016-01-10T00:00:00+01:00</updated>
  <id>http://localhost:4000/2016/01/10/a-new-chapter/</id>
  <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;NOTE: these are the words that I wrote to myself on October 31st 2016, the day
in which I left my then-current company. The piece was written with the intent
of being published, in case people who regard my opinion (future me hopefully included)
on working things can
have a look at how I reflect on my own decisions. Happy reading!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Dear future me&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;here’s you at the very end of your experience at Sytac.&lt;/p&gt;

&lt;p&gt;Yes, you multiple personalities weirdo.&lt;/p&gt;

&lt;p&gt;As of today you are not anymore on office as the CTO of &lt;a href=&quot;http://www.sytac.nl&quot;&gt;Sytac&lt;/a&gt;,
the IT consulting company you’ve part of in the last two years. As your memory is proverbially
awful, I hope these notes will give you a better perspective on how you feel
at the moment, surely a better one than what you &lt;em&gt;think&lt;/em&gt; you had.&lt;/p&gt;

&lt;h1 id=&quot;on-leaving&quot;&gt;On leaving&lt;/h1&gt;

&lt;p&gt;Yes, you quitter.&lt;/p&gt;

&lt;p&gt;It’s not the first time you leave colleagues you loved behind,
and you firmly believe that either you are part of the solution, or you are part
of the problem. Yet to leave is like declaring to the general public that you
believe to be part of the problem, so what’s up with that?&lt;/p&gt;

&lt;p&gt;Well, that’s true. With all your ideas and suggestions and big mouth and stuff,
you weren’t able to fix the problems that always bothered you, making you 100%
part of the problem, certified. Deep inside you almost always knew that you
were not cut for leading Sytac to revolutionize itself on your terms, and maybe
that was even a foolish thing to hope for in the first place.&lt;/p&gt;

&lt;p&gt;Yet, you wanted to believe and ran circles &lt;em&gt;around&lt;/em&gt; the main issues without facing the
biggest obstacles first. You feared you would have crushed on them anyway.&lt;/p&gt;

&lt;p&gt;So yes, better leave and give way to the new. But remember: next time, face the
biggest issues first, or else you might find yourself wasting precious time
chasing windmills.&lt;/p&gt;

&lt;h1 id=&quot;on-career&quot;&gt;On career&lt;/h1&gt;

&lt;p&gt;Yes, your ego.&lt;/p&gt;

&lt;p&gt;As pretty much everyone that ever wrote some software, you have a big
thirst for the alpha-nerd recognition. You did prove yourself here, so much that
you earned the C level. That was a morality booster for you, wasn’t it?&lt;/p&gt;

&lt;p&gt;The thing is, for you the most important part of getting up the ladder is to
prove yourself that you are capable of handling the bigger headaches that any
new accomplishment comes with. One step up, and you take due note that ok, that
is something you can do if you want. You fed your ego enough, time to move on.&lt;/p&gt;

&lt;p&gt;At this point you have evolved from an insecure, awkward nerd into an accomplished
professional who craves stage time and public attention. Your ego has inflated
enough, and at the moment you look at that CTO thingy more as an uncomfortable
position: if you are the top dog, who will you learn from?&lt;/p&gt;

&lt;p&gt;But by now you know it all too well, that you care almost nothing for what step of
the ladder you occupy: do something great and do it good, that’s what makes you
open your tail like a &lt;pavone&gt;.&lt;/pavone&gt;&lt;/p&gt;

&lt;h1 id=&quot;on-having-guts&quot;&gt;On having guts&lt;/h1&gt;

&lt;p&gt;Yes, you sissy.&lt;/p&gt;

&lt;p&gt;Despite your quite evident issue of logorrhea, you missed many
occasions in which you could open your damn mouth when it really mattered. You
saw potential and you didn’t fight to realize it. And you know why? You didn’t
think you could win it. And maybe you could not, but that’s beside the point.&lt;/p&gt;

&lt;p&gt;Make sure you always try your best, and if you think that’s not enough then be
open and admit failure. In software as in life, fail fast is always the best
option for everyone involved.&lt;/p&gt;

&lt;h1 id=&quot;on-closing&quot;&gt;On closing&lt;/h1&gt;

&lt;p&gt;Yes, you blatant fool, time to close this psycho letter.&lt;/p&gt;

&lt;p&gt;The past two years have been an interesting journey, and you did grow personally
and professionally and you &lt;a href=&quot;http://amsterdam2016.codemotionworld.com&quot;&gt;did things&lt;/a&gt;
you never dreamt you could handle. And as you know yourself good enough, that can
only mean that bigger challenges are ahead.&lt;/p&gt;

&lt;p&gt;Brace yourself, for the journey and keep your focus sharp on things that really
matter to you. But as you who read this is me in the future, you know that better
than me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eternal_return&quot;&gt;Or do you?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A si biri in bon’ora.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>The best keyboard layout for Clojurists</title>
  <link href="http://localhost:4000/2015/03/01/colemak-best-keyboard-for-clojurists/" rel="alternate" />
  <updated>2015-03-01T00:00:00+01:00</updated>
  <id>http://localhost:4000/2015/03/01/colemak-best-keyboard-for-clojurists/</id>
  <summary type="html">&lt;h1 id=&quot;keyboards-oh-my&quot;&gt;Keyboards, oh my!&lt;/h1&gt;

&lt;p&gt;If you’re a programmer, you spend most of your working life on your keyboard, and a good keyboard layout can make the difference between touch typing and carpal syndrome.&lt;/p&gt;

&lt;p&gt;That, and an irresistible drive for being the alpha nerd around, pushed me to teach myself &lt;a href=&quot;http://colemak.com/&quot;&gt;Colemak&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was painful and frustrating at the beginning, when I saw my typing speed precipitating from a respectable 80 words per minute to a horrific 20wpm. But now, now that touch typing has no mysteries for me on this mystical keyboard, now I got beyond my past self, recently crushing the 90wpm milestone. Hooray!&lt;/p&gt;

&lt;h1 id=&quot;def-best&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(def best)&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;In this data driven world, we constantly need to verify whether the decisions we make are still valid, and therefore the question: would Colemak be the best keyboard for me? Am I losing by sticking with the wrong choice? And would I be even willing to switch again keyboard layout in the foreseeable future?&lt;/p&gt;

&lt;p&gt;While the answer to the last question is a roaring &lt;a href=&quot;http://images.sodahead.com/polls/003657975/125779928_Noooooooooooooooo_answer_1_xlarge.Peg&quot;&gt;“NO!”&lt;/a&gt;, I needed to know. I needed data. But how?&lt;/p&gt;

&lt;p&gt;Well, first things first, I type lots of &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; and &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; these days. But I don’t care for the former language, my heart is really about my dear lispy friend. I just had to find a way to produce an automatic comparison, surely enough, here it is: the &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer/&quot;&gt;Keyboard Layout Analyzer&lt;/a&gt;, courtesy of &lt;a href=&quot;http://patorjk.com/&quot;&gt;Patrick Gillespie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love the Internet.&lt;/p&gt;

&lt;h1 id=&quot;the-winner-is&quot;&gt;The winner is..&lt;/h1&gt;

&lt;p&gt;Aaaaand here it is: a comparative analysis of what keyboard is the best for Clojure Developers™, after feeding the analyzer with &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clojure/core.clj&lt;/code&gt;&lt;/a&gt;, with its impressive 7447 lines of code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/colemak_clj.png&quot; alt=&quot;Test results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you know. Now it’s official.&lt;/p&gt;

&lt;p&gt;Happy touch typing, everyone!&lt;/p&gt;

&lt;p&gt;p.s.: you can read the details of the comparison &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer/#/load/D40PQ0hB&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Spring Environment is for initialization code only</title>
  <link href="http://localhost:4000/2015/01/31/spring-environment-only-for-init/" rel="alternate" />
  <updated>2015-01-31T00:00:00+01:00</updated>
  <id>http://localhost:4000/2015/01/31/spring-environment-only-for-init/</id>
  <summary type="html">&lt;p&gt;Since version 3.1, the &lt;a href=&quot;https://spring.io/&quot;&gt;Spring framework&lt;/a&gt; offers an abstraction towards several different
sources through which you can easily configure your application: the &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/Environment.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post I describe a micro benchmark that I ran to prove that, while it’s a convenient API if you’re
using Spring in your application, it might introduce a performance penalty for which you should not use it
outside of your initialization code.&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works&lt;/h1&gt;

&lt;p&gt;Before getting into the numbers, a quick digression on the internals of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; that are important
to this post.&lt;/p&gt;

&lt;p&gt;From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;em&gt;Properties play an important role in almost all applications, and may originate from a variety of sources: properties files, JVM system properties, system environment variables, JNDI, servlet context parameters, ad-hoc Properties objects, Maps, and so on. The role of the environment object with relation to properties is to provide the user with a convenient service interface for configuring property sources and resolving properties from them.&lt;/em&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; to have a common interface to properties provided with different strategies, using
a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;getProperty&lt;/code&gt; call to access the required value. Look at the following Groovy code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here be magic&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi, ${user}!&quot;&lt;/span&gt;
                         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi, ${nick}!&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, I can specify nicknames in a properties file so that I can greet know users with a more familiar nick name,
still being able to salute also users which are not given a nickname. Neat, but how about performance?&lt;/p&gt;

&lt;h1 id=&quot;the-hidden-exception&quot;&gt;The hidden Exception&lt;/h1&gt;

&lt;p&gt;I got into this exercise while debugging a couple of slow pages in the website I’m working on: the
&lt;a href=&quot;http://www.klm.com/destinations/nl/en/search&quot;&gt;destinations pages&lt;/a&gt; of the KLM main site. While performance is generally
satisfactory, two pages were constantly giving above second response times. Definitely &lt;a href=&quot;http://www.vm.ibm.com/devpages/jelliott/evrrt.html&quot;&gt;too much&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our code, we were translating some country names into queriable keys for an external services. We also needed to override
an otherwise straightforward translation algorithm with very specific exceptions to the rule. The actual code was pretty much
like the above &lt;code class=&quot;highlighter-rouge&quot;&gt;Greeter.greet(user)&lt;/code&gt;, and a &lt;a href=&quot;http://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/run.htm&quot;&gt;Flight Recorder&lt;/a&gt; session
eventually provided us with the performance bottleneck (click to open):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/post/exceptions.png&quot;&gt;&lt;img style=&quot;width: 500px&quot; src=&quot;/img/post/exceptions.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For 12 page refreshes we were silently throwing 140k+ exceptions. And exceptions are
&lt;a href=&quot;http://java-performance.info/throwing-an-exception-in-java-is-very-slow/&quot;&gt;sloooooow&lt;/a&gt;, even if you just create them.&lt;/p&gt;

&lt;p&gt;Looking at the top thrown exception, it was actually pretty
easy to understand what’s going on: the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; checks whether the requested property is defined in the current JNDI context. But, if the
name is not found, a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/naming/NameNotFoundException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NameNotFoundException&lt;/code&gt;&lt;/a&gt; is thrown. In our specific case we were using property lookup for &lt;em&gt;exceptional&lt;/em&gt; cases,
which means the vast majority of cases resulted in an exception being thrown.&lt;/p&gt;

&lt;h1 id=&quot;micro-benchmark&quot;&gt;Micro benchmark&lt;/h1&gt;

&lt;p&gt;I put together a &lt;a href=&quot;https://gist.github.com/skuro/648cf1d871d203a73a0c&quot;&gt;micro benchmark&lt;/a&gt; to evaluate the potential performance gain
of the original property lookup strategy versus a simpler one where relevant properties are loaded up at class construction time. I used the
&lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;Java Microbenchmark Harness&lt;/a&gt;, which does an incredible job at making micro benchmarks
easy on the JVM: JIT, warm up, class loading, all is taken care of for you and you can just go ahead and put your code under test. Here the results
(higher numbers better):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[Property lookup per invocation]&lt;/p&gt;

    &lt;p&gt;Result: 28917.876 ?(99.9%) 183.630 ops/s [Average] &lt;br /&gt;
Statistics: (min, avg, max) = (25688.067, 28917.876, 30976.876), stdev = 777.500 &lt;br /&gt;
&lt;strong&gt;Confidence interval (99.9%): [28734.246, 29101.505]&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[Property loading at class construction]&lt;/p&gt;

    &lt;p&gt;Result: 159062.900 ?(99.9%) 1013.309 ops/s [Average] &lt;br /&gt;
Statistics: (min, avg, max) = (138707.926, 159062.900, 177183.549), stdev = 4290.413 &lt;br /&gt;
&lt;strong&gt;Confidence interval (99.9%): [158049.591, 160076.209]&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;As expected, five times as fast.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;I’m not a big fan of Spring, but if you’re using it the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; class is a dead easy interface to your application configuration. But,
unless you’re using JNDI as your main store of configuration  properties,
its performance characteristics make it a great tool only if you’re using it in your initialization code, and not during on-line processing of
requests.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Alfresco H2 support releases and versioning scheme</title>
  <link href="http://localhost:4000/2014/07/06/alfresco-h2-support-new-releases-version-scheme/" rel="alternate" />
  <updated>2014-07-06T00:00:00+02:00</updated>
  <id>http://localhost:4000/2014/07/06/alfresco-h2-support-new-releases-version-scheme/</id>
  <summary type="html">&lt;p&gt;Some time has passed since the &lt;a href=&quot;/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/&quot;&gt;last releases&lt;/a&gt;, and all the merits go once again to our dear &lt;a href=&quot;http://springyweb.com/&quot;&gt;John Evans&lt;/a&gt; from &lt;a href=&quot;http://www.ixxus.com/&quot;&gt;Ixxus&lt;/a&gt;. Let’s see what’s new in the project.&lt;/p&gt;

&lt;h1 id=&quot;lots-of-releases-now-with-a-new-version-scheme&quot;&gt;Lots of releases, now with a new version scheme!&lt;/h1&gt;

&lt;p&gt;We were lagging behind Alfresco releases quite a bit, so you now have quite some &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;new releases&lt;/a&gt; to look at. Most importantly, starting with Alfresco 4.2.0 we decided to align H2 Support with the official Alfresco versioning. So, while H2 Support v1.7 and v1.8 are the ones to be used respectively with Alfresco Enterprise 4.1.5 and 4.1.6, you will easily guess what versions of Alfresco Enterprise will have to use H2 Support v4.2.0 and v4.2.1.&lt;/p&gt;

&lt;p&gt;Say your Alfresco v4.2.0 project is based on the &lt;a href=&quot;https://code.google.com/p/maven-alfresco-archetypes/&quot;&gt;maven archetypes&lt;/a&gt; (and shame on you if it’s not), then you could simply override the following &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt; in your pom:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2-support.version&amp;gt;&lt;/span&gt;${alfresco.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2-support.version&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- WARN WARN WARN!! --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Neah huh? But there’s a big &lt;code class=&quot;highlighter-rouge&quot;&gt;WARN&lt;/code&gt; sign in there, why’s that?&lt;/p&gt;

&lt;p&gt;Say the release of H2 Support is broken in any way (in theory it should never happen, but in practice it might happen). Then it might be a bit unfortunate if your poms rely on H2 Support and Alfresco to have exactly the same version. So, while the above should work in most cases, the preferred way to include H2 Support in your project is still as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2-support.version&amp;gt;&lt;/span&gt;4.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2-support.version&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- much better! --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;plans-for-the-future&quot;&gt;Plans for the future&lt;/h1&gt;

&lt;p&gt;In the future we plan to have a different strategy to bring H2 Support for Alfresco. Currently, we simply copy all the PostgreSQL in an H2 friendly package, so that the internal Alfresco machinery will automatically find them. Then, H2 compatibility mode is used to make the PostgreSQL dialect understood by the H2 driver. That’s obviously suboptimal, and we will research methods to skip shuffling files around, but rather override the Alfresco SQL files locator strategy. The new strategy should provide a better integration with any Alfresco release, and we might very well need not new H2 Support releases per Alfresco version.&lt;/p&gt;

&lt;p&gt;If you’d like to help us realizing this integration sweet spot, you’re so much welcome to joink the H2 Support crew!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>SeedUML, an online PlantUML editor</title>
  <link href="http://localhost:4000/2014/02/09/seeduml-an-online-plantuml-editor/" rel="alternate" />
  <updated>2014-02-09T00:00:00+01:00</updated>
  <id>http://localhost:4000/2014/02/09/seeduml-an-online-plantuml-editor/</id>
  <summary type="html">&lt;h1 id=&quot;finally-online&quot;&gt;Finally online&lt;/h1&gt;

&lt;p&gt;It’s my pleasure to announce the availability of &lt;a href=&quot;http://seeduml.com&quot;&gt;SeedUML&lt;/a&gt;, the online editor for UML diagrams based on the great &lt;a href=&quot;http://plantuml.sourceforge.net/&quot;&gt;PlantUML language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As it’s in its early beta stages, I’m sure you’ll find some rough edges here and there, but there’s some great and useful features I’m sure you’ll love. Especially if you’re new to PlantUML, you’ll find a damn easy way to create all sorts of UML diagrams, like &lt;a href=&quot;http://seeduml.com/GBK3c&quot;&gt;state&lt;/a&gt;, &lt;a href=&quot;http://seeduml.com/Nmr0D&quot;&gt;sequence&lt;/a&gt;, &lt;a href=&quot;http://seeduml.com/Jgfv9&quot;&gt;class&lt;/a&gt;, etc, all with a crystal clear plain text description. The diagram updates as you type, and you can save the image for later use, or simply link it wherever you need it to show up.&lt;/p&gt;

&lt;h1 id=&quot;quick-user-guide&quot;&gt;Quick user guide&lt;/h1&gt;

&lt;p&gt;If you need an user guide, the site is itself not easy enough to use. But let’s give a couple of pointers to start with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you need to start a new diagram, you go to &lt;a href=&quot;http://seeduml.com&quot;&gt;http://seeduml.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;a random diagram ID is generated, and you’ll be redirected to such diagram page (eg: &lt;a href=&quot;http://seeduml.com/GBK3c&quot;&gt;http://seeduml.com/GBK3c&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;remember to bookmark the URL if the diagram is important, as there’s no user save&lt;/li&gt;
  &lt;li&gt;you follow PlantUML docs and create beautiful diagram&lt;/li&gt;
  &lt;li&gt;whenever you need to edit the doc again, you go back to the same URL (you bookmarked it, right?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done. Easy, huh?&lt;/p&gt;

&lt;h1 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This is an &lt;strong&gt;early beta&lt;/strong&gt;, use at your own risk (and pleasure, hopefully). Especially, don’t expect to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;be guaranteed that your diagrams will stay there forever&lt;/li&gt;
  &lt;li&gt;the service will be up and running at all times&lt;/li&gt;
  &lt;li&gt;be able to save hidden diagrams&lt;/li&gt;
  &lt;li&gt;have a rock solid syntax highlight&lt;/li&gt;
  &lt;li&gt;etc etc etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will share some of the juicy technical details of that site later on on these pages, but for now, have fun and happy diagram authoring!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>H2 support 1.1.1 for Alfresco 3.4.12 Enterprise with Maven</title>
  <link href="http://localhost:4000/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/" rel="alternate" />
  <updated>2013-03-27T00:00:00+01:00</updated>
  <id>http://localhost:4000/2013/03/27/h2-support-for-alfresco-3-4-12-and-maven/</id>
  <summary type="html">&lt;p&gt;Just a quick update on the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;H2 support&lt;/a&gt;
project, today I released the &lt;code class=&quot;highlighter-rouge&quot;&gt;1.1.1&lt;/code&gt; maintenance version which targets
Alfresco v3.4.12 Enterprise.&lt;/p&gt;

&lt;p&gt;Please make sure you always double check the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;official documentation&lt;/a&gt;
to pick and choose the right version to use in your Alfresco project.&lt;/p&gt;

&lt;h1 id=&quot;h2-and-maven&quot;&gt;H2 and Maven&lt;/h1&gt;

&lt;p&gt;For &lt;del&gt;the sane&lt;/del&gt; those among you that use the &lt;a href=&quot;https://artifacts.alfresco.com/nexus/content/repositories/alfresco-docs/alfresco-lifecycle-aggregator/latest/index.html&quot;&gt;Maven SDK&lt;/a&gt;,
you should know that &lt;code class=&quot;highlighter-rouge&quot;&gt;H2 support&lt;/code&gt; is used to quickly boot the Alfresco repository
webapp during your development cycles.&lt;/p&gt;

&lt;p&gt;If you’re using a version of Alfresco other than the default 4.x that’s assumed
by the SDK, you must also adapt your H2 support version to be able to start up
Alfresco. It’s as easy as overriding the following maven property:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h2-support.version&amp;gt;1.1.1&amp;lt;/h2-support.version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Happy development!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Java StringBuilder myth debunked -- now with content!</title>
  <link href="http://localhost:4000/2013/03/11/java-stringbuilder-myth-now-with-content/" rel="alternate" />
  <updated>2013-03-11T00:00:00+01:00</updated>
  <id>http://localhost:4000/2013/03/11/java-stringbuilder-myth-now-with-content/</id>
  <summary type="html">&lt;h1 id=&quot;the-myth&quot;&gt;The myth&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concatenating two Strings with the plus operator is the source of all evil&lt;/p&gt;

  &lt;p&gt;– Anonymous Java dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The source code for the tests discussed here can be found on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s from university time that I learned to regard &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; concatenation in Java
using the ‘+’ plus operator as a deadly performance sin. Recently there has been
an internal review at &lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase R&amp;amp;D&lt;/a&gt; where such recurring
mantra was dismissed as a myth due to &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; under the hood
any time you use the plus operator to join Strings. I set myself up to prove
such a point and verify the reality under different environments.&lt;/p&gt;

&lt;h1 id=&quot;the-test&quot;&gt;The test&lt;/h1&gt;

&lt;p&gt;Relying on your compiler to optimize your &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; concatenation means that things
might change heavily depending on the JDK vendor you adopt. As far as platform
support goes for my daily job, three main vendors should be considered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle JDK&lt;/li&gt;
  &lt;li&gt;IBM JDK&lt;/li&gt;
  &lt;li&gt;ECJ – for developers only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, while we officially support Java 5 through 6, we are also looking into
supporting Java 7 for our products, adding another three-folded level of indirection on top of
the three vendors. For the sake of &lt;del&gt;lazyness&lt;/del&gt; simplicity, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ecj&lt;/code&gt; compiled
bytecode will be run with a single JDK, namely Oracle JDK7.&lt;/p&gt;

&lt;p&gt;I prepared a &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; VM with all the above JDK
installed, then I developed some classes to express three different concatenation
methods, amounting to three to four concatenations per method invocaiton,
depending on the specific test case.&lt;/p&gt;

&lt;p&gt;The test classes are run a thousands times for each test round, with a total of
100 rounds each test case. The same VM is used to run all the rounds for the same
test case, and it’s restarted across different test cases, all to let the Java
runtime perform all the optimizations it can, without affecting the other test
cases in any way. The default options were used to start all JVMs.&lt;/p&gt;

&lt;p&gt;More details can be found in the benchmark runner &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/bench.sh&quot;&gt;script&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-code&quot;&gt;The code&lt;/h1&gt;

&lt;p&gt;Full code for both test cases and the test suite is available on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following different test cases were produced to measure performance
differences of the String concatenation with plus against the direct use of a
&lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// String concat with plus
String result = &quot;const1&quot; + base;
result = result + &quot;const2&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// String concat with a StringBuilder
new StringBuilder()
              .append(&quot;const1&quot;)
              .append(base)
              .append(&quot;const2&quot;)
              .append(append)
              .toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//String concat with an initialized StringBuilder
new StringBuilder(&quot;const1&quot;)
              .append(base)
              .append(&quot;const2&quot;)
              .append(append)
              .toString();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The general idea is to provide a concatenation both at the head and at the tail
of constant &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;s over a variable. The difference between the last two cases,
both making explicit use of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;, is in the latter using the 1-arg
constructor which initializes the builder with the initial part of the result.&lt;/p&gt;

&lt;h1 id=&quot;the-results&quot;&gt;The results&lt;/h1&gt;

&lt;p&gt;Enough talking, down below here you can have a look at the generated graphs, where
each data point corresponds to a single test round (e.g. 1000 executions of the same
test class).&lt;/p&gt;

&lt;p&gt;The discussion of the results and some more juicy details will follow.&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;/img/post/catplus.png&quot; alt=&quot;Concatenation with plus&quot; title=&quot;Concatenation with plus&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/catsb.png&quot; alt=&quot;Concatenation with StringBuilder&quot; title=&quot;Concatenation with StringBuilder&quot; /&gt;
—-
&lt;img src=&quot;/img/post/catsb2.png&quot; alt=&quot;Concatenation with initialized StringBuilder&quot; title=&quot;Concatenation with initalized StringBuilder&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-discussion&quot;&gt;The discussion&lt;/h1&gt;

&lt;p&gt;Oracle JKD5 is the clear loser here, appearing to be in a B league when compared
to the others. But that’s not really the scope of this exercise, and thus we’ll
gloss over it for the time being.&lt;/p&gt;

&lt;p&gt;That said, there are two other interesting bits I observe in the above graph. The first is that indeed
there is generally quite a difference between the use of the plus operator vs an explicit
&lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;, &lt;em&gt;especially&lt;/em&gt; if you’re using Oracle Java5 which performs tree
times worse the the rest of the crew.&lt;/p&gt;

&lt;p&gt;The second observation is that while it generally holds for most of the JDKs that
an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; will offer up to twice the speed as the regular plus
operator, &lt;strong&gt;IBM JDK6 seems not to suffer&lt;/strong&gt; from any performance loss, always averaging
25ms to complete the task in all test cases.&lt;/p&gt;

&lt;p&gt;A closer look at the generated bytecode reveals some interesting details&lt;/p&gt;

&lt;h1 id=&quot;the-bytecode&quot;&gt;The bytecode&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the decompiled classes are also available on &lt;a href=&quot;https://github.com/skuro/stringbuilder&quot;&gt;Github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Across all possible JDKs &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilders&lt;/code&gt; are &lt;strong&gt;always&lt;/strong&gt; used to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;
concatenation even in presence of a plus sign.
Moreover, across all vendors and versions, &lt;strong&gt;there is almost no difference at all&lt;/strong&gt;
for the same test case. The only one that stands a bit apart is &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatPlus.class.txt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ecj&lt;/code&gt;&lt;/a&gt;,
which is the only one to cleverly optimize the &lt;code class=&quot;highlighter-rouge&quot;&gt;CatPlus&lt;/code&gt; test case to invoke
the 1-arg constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; instead of the 0-arg version.&lt;/p&gt;

&lt;p&gt;Comparing the resulting bytecode exposes what could affect performance in the
different scnarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;when concatenating with plus, &lt;em&gt;new instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;&lt;/em&gt; are created
any time a concatenation happens. This can easily result in a performance
degradation due to useless invocation of the constructor plus more stress on
the garbage collector due to throw away instances&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compilers will take you literally and only initalize &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; with its
1-arg constructor if and only if you write it that way in the original code. This
results in respectively four and three invocations of &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder.append&lt;/code&gt; for
&lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatSB.class.txt&quot;&gt;CatSB&lt;/a&gt; and &lt;a href=&quot;https://github.com/skuro/stringbuilder/blob/master/ecj/CatSB2.class.txt&quot;&gt;CatSB2&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-conclusion&quot;&gt;The conclusion&lt;/h1&gt;

&lt;p&gt;Bytecode analysis offers the final answer to the original question.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you need to explicitly use a &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; to improve performance? &lt;strong&gt;Yes&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above graphs clearly show that, unless you’re using IBM JDK6 runtime, you will
loss 50% performance when using the plus operator, although it’s the one to perform
slightly worse across the candidates when expliciting &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Also, it’s quite interesting to see how &lt;em&gt;JIT optimizations&lt;/em&gt; impact the overall
performance: for instance, even in presence of different bytecode between the two
explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; test cases, the end result is absolutely the same in the
long run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/myth-confirmed.jpg&quot; alt=&quot;Myth confirmed&quot; /&gt;&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>The Observer Pattern in Spring</title>
  <link href="http://localhost:4000/2013/03/10/observer-pattern-spring-framework/" rel="alternate" />
  <updated>2013-03-10T00:00:00+01:00</updated>
  <id>http://localhost:4000/2013/03/10/observer-pattern-spring-framework/</id>
  <summary type="html">&lt;h1 id=&quot;observers-in-spring&quot;&gt;Observers in Spring&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;To the man-in-the-street, who, I’m sorry to say,&lt;br /&gt;
Is a keen observer of life,&lt;br /&gt;
The word “Intellectual” suggests straight away&lt;br /&gt;
A man who’s untrue to his wife.&lt;/p&gt;

  &lt;p&gt;– W.H. Auden&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Observer pattern is a very basic one out of the GoF bible which is unbelivably easy to implement and still quote
powerful so use. Here I present my take on it using the Spring observer pattern which I found quite helpful in designing
extension points for my software.&lt;/p&gt;

&lt;h1 id=&quot;core-classes&quot;&gt;Core classes&lt;/h1&gt;

&lt;p&gt;Pushing back the little NIH devil whispering in my ears, I started by reusing the standard building blocks for the
Observer pattern: &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Observable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Observer&lt;/code&gt;. The Observable class provides the logic to handle a
registry of Observers, and to propagate updates (I prefer to think more of in terms of events) to all of the registered
Observers.&lt;/p&gt;

&lt;p&gt;In the context of a Spring container, there will be beans to configure and hook together, and it’s key to this exercise
to find a flexible and handy way to connect things together.&lt;/p&gt;

&lt;h1 id=&quot;automatic-registration&quot;&gt;Automatic registration&lt;/h1&gt;

&lt;p&gt;Supporting code for this blog post can be found on &lt;a href=&quot;https://github.com/skuro/spring-observer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When developing a Spring application you’re always instantiating your classes as singletons within the Spring container.
Annotations or XML configurations will take care  of initialize instances of your classes, wiring them together in a
connected graph of objects with loose dependencies on the specific concrete classes you adopt in your code.&lt;/p&gt;

&lt;p&gt;As you will always have to declare beans, it would be nice to let Spring wire obects for you in an Observer fashion,
with a minimal coding effort required. The most minimalistic approach I could think of is to just require developers to
declare their observer beans, and put in place enough machinery to automatically hook them to an Observable provided by
the application. In this example I create a &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObserver&lt;/code&gt;
tagging interface to identify which beans are actually declaring valid Observers, and register them automatically.&lt;/p&gt;

&lt;p&gt;To complete the picture, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObservable&lt;/code&gt; interface declares which &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; class it’s able to notify, thus
leveraging the tagging interface and letting the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; know which beans to filter and registser.&lt;/p&gt;

&lt;p&gt;This enables a software component to provide the desired &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringObservable&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverBeanPostProcessor&lt;/code&gt; beans, where
consumers of such API will be only required to instantiate their &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; beans.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;Observers&lt;/code&gt; can be themselves &lt;code class=&quot;highlighter-rouge&quot;&gt;Observables&lt;/code&gt;, so that you can easily construct chains of beans in which events
will be propagated. As long as you ensure not to form any cyclic graph, of course.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;In object oriented languages such as Java, patterns are a powerful tool to apply. The Observer is a neat strategy for
cascading changes on objects, or just to propagate events through a series of processors. All in a clean, loosly coupled
fashion.&lt;/p&gt;

&lt;p&gt;The code here is just a proof of concept, not a library which is intended for production use. The concepts and the
implementation are easy enough to be applied in your Spring application without any need for depending on this code.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Java StringBuilder myth debunked</title>
  <link href="http://localhost:4000/2013/03/06/java-stringbuilder-myth/" rel="alternate" />
  <updated>2013-03-06T00:00:00+01:00</updated>
  <id>http://localhost:4000/2013/03/06/java-stringbuilder-myth/</id>
  <summary type="html">&lt;p&gt;&lt;em&gt;NOTE: this post was published before it was ready, the real content can now be found &lt;a href=&quot;2013/03/11/java-stringbuilder-myth-now-with-content/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</summary>
</entry>


<entry>
  <title>A svn post commit hook to comment on Jira</title>
  <link href="http://localhost:4000/2013/02/18/svn-postcommit-hook-jira-comments/" rel="alternate" />
  <updated>2013-02-18T00:00:00+01:00</updated>
  <id>http://localhost:4000/2013/02/18/svn-postcommit-hook-jira-comments/</id>
  <summary type="html">&lt;p&gt;If I had to pick a single thing that really bothers me of &lt;a href=&quot;https://confluence.atlassian.com/display/AOD/JIRA+OnDemand&quot;&gt;Jira OnDemand&lt;/a&gt;
is that it &lt;a href=&quot;https://jira.atlassian.com/browse/AOD-710&quot;&gt;doesn’t support our hosted svn&lt;/a&gt; in any
possible way.&lt;/p&gt;

&lt;p&gt;The biggest pain developers like me have without any basic integration between the VCS and the ticketing system is that any time you have to
test an issue, perform some code reviews, sort out some merging or simply digging the history of a given piece of code, it wastes your time to
switch between all of your unconnected tools to accomplish your task. As an example, at &lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase&lt;/a&gt; we use
&lt;a href=&quot;http://trac.edgewall.org/&quot;&gt;Trac&lt;/a&gt; to look at our code on a browser, and we end up having to type URLs by hand to switch on and off Jira.&lt;/p&gt;

&lt;p&gt;How hard could it be to simply &lt;em&gt;link&lt;/em&gt; Jira to our commits?&lt;/p&gt;

&lt;h2 id=&quot;a-hint-to-the-solution&quot;&gt;A hint to the solution&lt;/h2&gt;

&lt;p&gt;Looking at a way to fix this issue, I first had an intuition: what our Jira &lt;em&gt;does&lt;/em&gt; support are web links to an issue. Trac is
just another web site, why can’t we use application links instead of listing the commit messages as Jira comments? After all,
there’s a &lt;a href=&quot;https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+for+Remote+Issue+Links&quot;&gt;rich API&lt;/a&gt; that I can use to
script the hell out of our commits! It literally took me 40 minutes to come up with the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/skuro/4981464.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It currently features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;creates a &lt;em&gt;Related commits&lt;/em&gt; link on each Jira issue mentioned in your commit comment&lt;/li&gt;
  &lt;li&gt;multiple Jira keys in the same commit message supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it. Not an impressive list of features, but enough for 40m hacking on bash scripts. When we’ll have this hook installed
in our svn server, we can easily go from the Jira issue to all the diffs associated with it.&lt;/p&gt;

&lt;p&gt;This facilitates code reviews and
issue verification or analysis at a later stage, enormously simplifying the life of every developer by providing that dead-simple
integration that Atlassian doesn’t want to provide out of the box.&lt;/p&gt;

&lt;p&gt;I understand the performance reasons behind avoid fully integrating
on-premise svn with OnDemand instances. Still, they could do much, much better than say they’re sorry and live their customers
lives being miserable because of it.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>H2 support 1.5 for Alfresco 4.1.1 Enterprise</title>
  <link href="http://localhost:4000/2012/10/16/alfresco-h2-support-update/" rel="alternate" />
  <updated>2012-10-16T00:00:00+02:00</updated>
  <id>http://localhost:4000/2012/10/16/alfresco-h2-support-update/</id>
  <summary type="html">&lt;p&gt;After Alfresco version 4.1.1 Enterprise came out earlier this month,
&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;H2 support&lt;/a&gt; needed to
stay up to date and release a new version which incorporates the
few schema changes in the Alfresco database. Thanks to
&lt;a href=&quot;http://springyweb.com&quot;&gt;Jon Evans&lt;/a&gt; and &lt;a href=&quot;http://www.ixxus.com&quot;&gt;Ixxus&lt;/a&gt;,
 H2 Support v1.5 it’s already out there!&lt;/p&gt;

&lt;h1 id=&quot;version-management&quot;&gt;Version management&lt;/h1&gt;

&lt;p&gt;As
&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;usual&lt;/a&gt;,
H2 support follows its own version numbering scheme, and you need to
double check which one to use depending on the Alfresco version you’re
running: version 1.5 only supports Alfresco 4.1.1 Enterprise, so if
you’re targeting other versions go and update your POM.&lt;/p&gt;

&lt;h1 id=&quot;availability-on-maven-central&quot;&gt;Availability on Maven Central&lt;/h1&gt;

&lt;p&gt;By the time of this writing, H2 support was just pushed to
&lt;a href=&quot;https://oss.sonatype.org/index.html&quot;&gt;Sonatype OSS&lt;/a&gt;, and while it
should happen shortly, it still has to be synchronized with Maven
Central. If the following Maven dependency fails to resolve, try to
download and install it from
&lt;a href=&quot;https://oss.sonatype.org/content/repositories/releases/tk/skuro/alfresco/h2-support/1.5/&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;tk.skuro.alfresco&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;h2-support&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On a side note, the stats feature of Sonatype Nexus are plain awesome.
I can have direct insights of the amount of downloads of H2 support
over time, split by version number. Check it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/h2stats.png&quot; alt=&quot;H2 download stats&quot; title=&quot;H2 download stats&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;your-chance-to-be-awesome&quot;&gt;Your chance to be awesome&lt;/h1&gt;

&lt;p&gt;Jon was just great to help H2 support and provide the patch that made
1.5 happen. It’s always inspiring to see how OpenSource drives people
to build something together, spending time to shape technology to be
the way we need, asking for nothing else in return than just be part
of the community.&lt;/p&gt;

&lt;p&gt;H2 support is a tiny project, and requires little
development and maintenance. Still, you can always help by either
testing it against &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;undocumented Alfresco versions&lt;/a&gt;, or &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/issues&quot;&gt;reporting bugs&lt;/a&gt;
or your wish list as soon as you figure them out.&lt;/p&gt;

&lt;p&gt;Thanks for reading this and happy Alfresco hacking!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>October Amsterdam Clojure 2012 is coming up!</title>
  <link href="http://localhost:4000/2012/10/14/october-amsterdam-clojure-coming-up/" rel="alternate" />
  <updated>2012-10-14T00:00:00+02:00</updated>
  <id>http://localhost:4000/2012/10/14/october-amsterdam-clojure-coming-up/</id>
  <summary type="html">&lt;p&gt;Saturday, October 27th. Less than two weeks. That’s the time when
October Amsterdam Clojure, the biggest Clojure free event in the
Netherlands, will be up on stage. I’m so incredibly excited about it,
I can’t wait to see all the seasoned clojurians, passionate
technologists and curious newbies meet together to discuss one of the
most intriguing technologies of our present day. Here’s a couple of
things to remind you of what’s ahead of us.&lt;/p&gt;

&lt;h1 id=&quot;dont-forget-to-bring-a-ticket&quot;&gt;Don’t forget to bring a ticket&lt;/h1&gt;

&lt;p&gt;As much as the event is totally free to attend, our limited logistics
imposes us a limit on the attendance. In order to reserve your seat at
the event, just go on the event
&lt;a href=&quot;http://bit.ly/octamsclj-register&quot;&gt;Meetup page&lt;/a&gt; and RSVP. This much,
and you’ll be joining us and have full access to the conference.&lt;/p&gt;

&lt;h1 id=&quot;how-to-reach-us&quot;&gt;How to reach us&lt;/h1&gt;

&lt;p&gt;As it goes with all Amsterdam Clojurians regular meetup, the big
October event will be also hosted by
&lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase&lt;/a&gt;. You can find the &lt;a href=&quot;http://www.backbase.com/contact/DIRECTIONS-backbase-INIT.pdf&quot;&gt;directions to
the venue&lt;/a&gt; on the official &lt;a href=&quot;http://amsclj.nl/october.html&quot;&gt;event page&lt;/a&gt;.
While it’s not far from Central Station, make sure to take note of the
correct address. Once you’re in the neighborhood, it’s easy to find
us: just go to the main entrance of the big, glass building with the
huge newspapers logos on top. Yes,
&lt;a href=&quot;http://www.cctvinfo.com/news_images/Geutebruck_INIT_building_ext.gif&quot;&gt;that one&lt;/a&gt;.
You’ll find some of our awesome Clojurian volunteer to wait for you
downstairs.&lt;/p&gt;

&lt;h1 id=&quot;afterparty-drinkup&quot;&gt;Afterparty drinkup&lt;/h1&gt;

&lt;p&gt;We’re still in the process of organizing a drinkup right after the
event, make sure your agenda is free in order to join the swarm of
Clojure coders and discuss functional programming philosophies over a
couple of beers!&lt;/p&gt;

&lt;h1 id=&quot;stay-up-to-date&quot;&gt;Stay up to date&lt;/h1&gt;

&lt;p&gt;Events are complex beasts, and we’ll try hard to let you always be up
to date with any sudden change of the plan. If you want to double
check the official plan, here’s where you can find all the info you
need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the official &lt;a href=&quot;http://bit.ly/octamsclj-register&quot;&gt;event page&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;#OctAmsClj at
 &lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/74036402/&quot;&gt;Meetup.com&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;our official social channels (&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/74036402/&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;our official social channels (&lt;a href=&quot;https://twitter.com/amsclj&quot;&gt;Twitter&lt;/a&gt;,
(Facebook)[http://www.facebook.com/AmsterdamClojurians] and
&lt;a href=&quot;https://plus.google.com/107873826198867434419/about&quot;&gt;Google+&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to meet you there!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>org4idea adds org-mode support to Intellij IDEA</title>
  <link href="http://localhost:4000/2012/09/08/org-mode-intellij-plugin/" rel="alternate" />
  <updated>2012-09-08T00:00:00+02:00</updated>
  <id>http://localhost:4000/2012/09/08/org-mode-intellij-plugin/</id>
  <summary type="html">&lt;p&gt;&lt;em&gt;tl;dr:&lt;/em&gt; &lt;a href=&quot;https://github.com/skuro/org4idea&quot;&gt;org4idea&lt;/a&gt; is a brand new
 project to add &lt;a href=&quot;http://orgmode.org&quot;&gt;org-mode&lt;/a&gt; support to &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-coin-with-two-sides&quot;&gt;A coin with two sides&lt;/h2&gt;

&lt;p&gt;Given the gargantuan size of the feature list of
&lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt;, there’s hardly any competition of
note taking systems for hackers. I’m completely sold on it since long
time already, so much that
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?uptime&quot;&gt;uptime(1)&lt;/a&gt; returns
always a quite precise approximation of the Emacs process lifetime.&lt;/p&gt;

&lt;p&gt;While such setup makes for a merry and seamless experience while
hacking on my &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; projects, the dream
breakes when I move to work on Java code, where I shall have no other
IDE besides &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;baby-steps&quot;&gt;Baby steps&lt;/h2&gt;

&lt;p&gt;As there’s no better way than a quick hacking session to start the
weekend, I eventually decided to take some time to put together a
minimal plugin to support editing org files within IntelliJ: a few
hours later &lt;a href=&quot;https://github.com/skuro/org4idea&quot;&gt;org4idea&lt;/a&gt; landed on my
GitHub account. It’s a ridiculously tiny plugin at the moment, only
providing syntax highlight for comments and outlines.&lt;/p&gt;

&lt;p&gt;While I’m
not planning to support all the features and plugins of org in
IntelliJ you can safely bet I’ll be adding new features with time. You
can always open an &lt;a href=&quot;https://github.com/skuro/org4idea/issues&quot;&gt;issue&lt;/a&gt;
to try to buy some karma points to that specific feature you desperately
need to be implemented (well, in such cases you could also realize you’re just
one fork away).&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;While the plugin still awaits approval in the official
&lt;a href=&quot;http://plugins.intellij.net/plugin?pr=&amp;amp;pluginId=7095&quot;&gt;repository&lt;/a&gt; you
can manually install the plugin by downloading &lt;a href=&quot;https://github.com/downloads/skuro/org4idea/org4idea.jar&quot;&gt;org4idea.jar&lt;/a&gt;
and feed it to the &lt;em&gt;Settings -&amp;gt; Plugins -&amp;gt; Install plugin from disk&lt;/em&gt;
dialog.&lt;/p&gt;

&lt;p&gt;Happy GTD!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Slides from Dispatch in Clojure</title>
  <link href="http://localhost:4000/2012/08/31/dispatch-in-clojure-presentation-slides/" rel="alternate" />
  <updated>2012-08-31T00:00:00+02:00</updated>
  <id>http://localhost:4000/2012/08/31/dispatch-in-clojure-presentation-slides/</id>
  <summary type="html">&lt;h2 id=&quot;presentation-slides&quot;&gt;Presentation slides&lt;/h2&gt;

&lt;p&gt;A bit late, and already announced
&lt;a href=&quot;https://twitter.com/skuro/status/233285542769487875&quot;&gt;elsewhere&lt;/a&gt;, but
here you can find the slides from the &lt;em&gt;Dispatch in Clojure&lt;/em&gt;
presentation I gave at the
&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/73689122/&quot;&gt;August 2012 meetup&lt;/a&gt;
of the
&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/&quot;&gt;Amsterdam Clojurians&lt;/a&gt;
group. Hopefully it will ease you bearing to wait for the &lt;a href=&quot;amsclj.nl/october.htm&quot;&gt;October
Amsterdam Clojure&lt;/a&gt; event later in October :-)&lt;/p&gt;

&lt;p&gt;The code samples I used in the presentation are available on &lt;a href=&quot;https://github.com/skuro/clj-dispatch&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/13915010&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;h2 id=&quot;the-story-behind&quot;&gt;The story behind&lt;/h2&gt;

&lt;p&gt;In a previous meetup a discussion arose about
&lt;a href=&quot;http://clojure.org/protocols&quot;&gt;protocols&lt;/a&gt; and how they relate to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mixin&quot;&gt;mixins&lt;/a&gt; in other languages such
as &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. A quick mention to virtual
methods dispatch table was enough to let my head spin around all the
details I was missing on low level Clojure mechanics. A presentation
was due.&lt;/p&gt;

&lt;h2 id=&quot;whats-in&quot;&gt;What’s in&lt;/h2&gt;

&lt;p&gt;What I was curious about, and eventually ended in the presentation, is
how Clojure implements function calls and method dispatch from both a
low level JVM and high level language syntax perspectives, and how
they relate to each other. What’s (briefly) covered in the
presentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JVM bytecodes used for method call&lt;/li&gt;
  &lt;li&gt;plain &lt;a href=&quot;http://clojure.org/functional_programming&quot;&gt;function call&lt;/a&gt; in Clojure&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure.org/multimethods&quot;&gt;multimethods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure.org/Protocols&quot;&gt;protocols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What couldn’t be entered in the presentation is the interesting
digressions we had during the meetup using an open REPL, some sample
projects and a Java decompiler.&lt;/p&gt;

&lt;p&gt;Video recordings are still a pending TODO in the meetup list, so if
you’re around Amsterdam make sure you come and &lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/&quot;&gt;join us&lt;/a&gt; for some other
awesome Dutch Clojure nights!&lt;/p&gt;
</summary>
</entry>



</feed>
